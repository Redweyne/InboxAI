{"file_contents":{"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/inbox.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Mail, AlertCircle, Star, Inbox as InboxIcon, Clock, TrendingUp, Package, Users, Newspaper } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { Email } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\nconst categoryIcons = {\n  urgent: AlertCircle,\n  important: Star,\n  promotional: TrendingUp,\n  social: Users,\n  updates: Package,\n  newsletter: Newspaper,\n};\n\nconst categoryColors = {\n  urgent: \"text-destructive\",\n  important: \"text-chart-4\",\n  promotional: \"text-chart-2\",\n  social: \"text-chart-3\",\n  updates: \"text-chart-1\",\n  newsletter: \"text-muted-foreground\",\n};\n\nexport default function Inbox() {\n  const { data: emails = [], isLoading } = useQuery<Email[]>({\n    queryKey: [\"/api/emails\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-4\">\n        <Skeleton className=\"h-12 w-64\" />\n        {[...Array(5)].map((_, i) => (\n          <Skeleton key={i} className=\"h-24 w-full\" />\n        ))}\n      </div>\n    );\n  }\n\n  if (emails.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <div className=\"text-center max-w-sm mx-auto py-12\">\n          <div className=\"inline-flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 mb-4\">\n            <InboxIcon className=\"h-8 w-8 text-primary\" />\n          </div>\n          <h2 className=\"text-lg font-medium mb-2\">No emails yet</h2>\n          <p className=\"text-sm text-muted-foreground mb-6\">\n            Your emails will appear here once they are synced from Gmail\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const unreadCount = emails.filter((e) => !e.isRead).length;\n  const urgentCount = emails.filter((e) => e.isUrgent).length;\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"border-b border-border p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-semibold flex items-center gap-2\">\n              <Mail className=\"h-6 w-6 text-primary\" />\n              Inbox\n            </h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {emails.length} total emails • {unreadCount} unread • {urgentCount} urgent\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Email List */}\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-6 space-y-2\">\n          {emails.map((email) => {\n            const CategoryIcon = categoryIcons[email.category as keyof typeof categoryIcons] || Mail;\n            const categoryColor = categoryColors[email.category as keyof typeof categoryColors] || \"text-foreground\";\n\n            return (\n              <Card\n                key={email.id}\n                className={`p-4 hover-elevate cursor-pointer transition-all ${\n                  !email.isRead ? \"border-l-4 border-l-primary\" : \"\"\n                }`}\n                data-testid={`card-email-${email.id}`}\n              >\n                <div className=\"flex items-start justify-between gap-4\">\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <span className={`font-medium truncate ${!email.isRead ? \"font-semibold\" : \"\"}`} data-testid={`text-sender-${email.id}`}>\n                        {email.from}\n                      </span>\n                      {email.isStarred && <Star className=\"h-4 w-4 text-chart-4 fill-chart-4\" data-testid={`icon-starred-${email.id}`} />}\n                    </div>\n                    <h3 className={`text-sm mb-1 truncate ${!email.isRead ? \"font-semibold\" : \"font-medium\"}`} data-testid={`text-subject-${email.id}`}>\n                      {email.subject}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`text-snippet-${email.id}`}>{email.snippet}</p>\n                    <div className=\"flex flex-wrap gap-2 mt-2\">\n                      {email.isUrgent && (\n                        <Badge variant=\"destructive\" className=\"text-xs\" data-testid={`badge-urgent-${email.id}`}>\n                          <AlertCircle className=\"h-3 w-3 mr-1\" />\n                          Urgent\n                        </Badge>\n                      )}\n                      <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-category-${email.id}`}>\n                        <CategoryIcon className={`h-3 w-3 mr-1 ${categoryColor}`} />\n                        {email.category}\n                      </Badge>\n                      {email.attachmentCount > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\" data-testid={`badge-attachment-${email.id}`}>\n                          {email.attachmentCount} attachment{email.attachmentCount > 1 ? \"s\" : \"\"}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right flex-shrink-0\">\n                    <div className=\"text-xs text-muted-foreground font-mono\" data-testid={`text-date-${email.id}`}>\n                      {format(new Date(email.date), \"MMM d\")}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground font-mono\" data-testid={`text-time-${email.id}`}>\n                      {format(new Date(email.date), \"h:mm a\")}\n                    </div>\n                  </div>\n                </div>\n              </Card>\n            );\n          })}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n","size_bytes":5783},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { SyncBanner } from \"@/components/sync-banner\";\nimport Chat from \"@/pages/chat\";\nimport Inbox from \"@/pages/inbox\";\nimport Calendar from \"@/pages/calendar\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Chat} />\n      <Route path=\"/inbox\" component={Inbox} />\n      <Route path=\"/calendar\" component={Calendar} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <SidebarProvider style={style as React.CSSProperties}>\n          <div className=\"flex h-screen w-full\">\n            <AppSidebar />\n            <div className=\"flex flex-col flex-1 overflow-hidden\">\n              <header className=\"border-b border-border bg-background\">\n                <div className=\"flex items-center justify-between gap-2 p-4\">\n                  <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                  <ThemeToggle />\n                </div>\n                <SyncBanner />\n              </header>\n              <main className=\"flex-1 overflow-hidden\">\n                <Router />\n              </main>\n            </div>\n          </div>\n        </SidebarProvider>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":2089},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 0% 98%;\n\n  --foreground: 220 5% 12%;\n\n  --border: 220 6% 88%;\n\n  --card: 220 2% 95%;\n\n  --card-foreground: 220 5% 12%;\n\n  --card-border: 220 5% 90%;\n\n  --sidebar: 220 3% 93%;\n\n  --sidebar-foreground: 220 5% 12%;\n\n  --sidebar-border: 220 4% 88%;\n\n  --sidebar-primary: 217 91% 45%;\n\n  --sidebar-primary-foreground: 220 0% 99%;\n\n  --sidebar-accent: 220 8% 86%;\n\n  --sidebar-accent-foreground: 220 5% 18%;\n\n  --sidebar-ring: 217 91% 45%;\n\n  --popover: 220 4% 91%;\n\n  --popover-foreground: 220 5% 12%;\n\n  --popover-border: 220 5% 86%;\n\n  --primary: 217 91% 45%;\n\n  --primary-foreground: 220 0% 99%;\n\n  --secondary: 220 6% 85%;\n\n  --secondary-foreground: 220 5% 18%;\n\n  --muted: 220 10% 87%;\n\n  --muted-foreground: 220 4% 40%;\n\n  --accent: 220 12% 84%;\n\n  --accent-foreground: 220 5% 18%;\n\n  --destructive: 0 72% 48%;\n\n  --destructive-foreground: 0 0% 99%;\n\n  --input: 220 8% 75%;\n  --ring: 217 91% 45%;\n  --chart-1: 217 91% 45%;\n  --chart-2: 262 83% 58%;\n  --chart-3: 173 58% 39%;\n  --chart-4: 43 96% 56%;\n  --chart-5: 27 87% 55%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 6% 12% / 0.04);\n  --shadow-xs: 0px 1px 2px 0px hsl(220 6% 12% / 0.06);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 6% 12% / 0.05), 0px 1px 2px -1px hsl(220 6% 12% / 0.05);\n  --shadow: 0px 4px 6px 0px hsl(220 6% 12% / 0.04), 0px 2px 4px -1px hsl(220 6% 12% / 0.05);\n  --shadow-md: 0px 6px 12px 0px hsl(220 6% 12% / 0.06), 0px 3px 6px -2px hsl(220 6% 12% / 0.06);\n  --shadow-lg: 0px 10px 20px 0px hsl(220 6% 12% / 0.08), 0px 4px 8px -2px hsl(220 6% 12% / 0.07);\n  --shadow-xl: 0px 16px 32px 0px hsl(220 6% 12% / 0.10), 0px 6px 12px -3px hsl(220 6% 12% / 0.08);\n  --shadow-2xl: 0px 24px 48px 0px hsl(220 6% 12% / 0.12);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 4% 8%;\n\n  --foreground: 220 4% 92%;\n\n  --border: 220 5% 18%;\n\n  --card: 220 4% 11%;\n\n  --card-foreground: 220 4% 92%;\n\n  --card-border: 220 5% 16%;\n\n  --sidebar: 220 4% 13%;\n\n  --sidebar-foreground: 220 4% 92%;\n\n  --sidebar-border: 220 5% 19%;\n\n  --sidebar-primary: 217 91% 52%;\n\n  --sidebar-primary-foreground: 220 0% 99%;\n\n  --sidebar-accent: 220 6% 20%;\n\n  --sidebar-accent-foreground: 220 4% 92%;\n\n  --sidebar-ring: 217 91% 52%;\n\n  --popover: 220 4% 16%;\n\n  --popover-foreground: 220 4% 92%;\n\n  --popover-border: 220 5% 22%;\n\n  --primary: 217 91% 52%;\n\n  --primary-foreground: 220 0% 99%;\n\n  --secondary: 220 5% 22%;\n\n  --secondary-foreground: 220 4% 92%;\n\n  --muted: 220 8% 18%;\n\n  --muted-foreground: 220 4% 65%;\n\n  --accent: 220 10% 19%;\n\n  --accent-foreground: 220 4% 92%;\n\n  --destructive: 0 72% 48%;\n\n  --destructive-foreground: 0 0% 99%;\n\n  --input: 220 8% 32%;\n  --ring: 217 91% 52%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 262 83% 68%;\n  --chart-3: 173 58% 55%;\n  --chart-4: 43 96% 65%;\n  --chart-5: 27 87% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 2px 0px hsl(220 0% 0% / 0.28);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 0% 0% / 0.24), 0px 1px 2px -1px hsl(220 0% 0% / 0.24);\n  --shadow: 0px 4px 6px 0px hsl(220 0% 0% / 0.22), 0px 2px 4px -1px hsl(220 0% 0% / 0.24);\n  --shadow-md: 0px 6px 12px 0px hsl(220 0% 0% / 0.28), 0px 3px 6px -2px hsl(220 0% 0% / 0.28);\n  --shadow-lg: 0px 10px 20px 0px hsl(220 0% 0% / 0.34), 0px 4px 8px -2px hsl(220 0% 0% / 0.32);\n  --shadow-xl: 0px 16px 32px 0px hsl(220 0% 0% / 0.40), 0px 6px 12px -3px hsl(220 0% 0% / 0.36);\n  --shadow-2xl: 0px 24px 48px 0px hsl(220 0% 0% / 0.48);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11241},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/calendar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Calendar as CalendarIcon, Clock, MapPin, Users, Loader2 } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { CalendarEvent } from \"@shared/schema\";\nimport { format, isToday, isTomorrow, parseISO } from \"date-fns\";\n\nexport default function Calendar() {\n  const { data: events = [], isLoading } = useQuery<CalendarEvent[]>({\n    queryKey: [\"/api/calendar/events\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-4\">\n        <Skeleton className=\"h-12 w-64\" />\n        {[...Array(5)].map((_, i) => (\n          <Skeleton key={i} className=\"h-32 w-full\" />\n        ))}\n      </div>\n    );\n  }\n\n  const upcomingEvents = events.filter(\n    (event) => new Date(event.startTime) >= new Date()\n  );\n\n  const todayEvents = upcomingEvents.filter((event) =>\n    isToday(new Date(event.startTime))\n  );\n\n  const formatEventDate = (date: Date) => {\n    if (isToday(date)) return \"Today\";\n    if (isTomorrow(date)) return \"Tomorrow\";\n    return format(date, \"EEEE, MMM d\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"border-b border-border p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-2xl font-semibold flex items-center gap-2\">\n              <CalendarIcon className=\"h-6 w-6 text-primary\" />\n              Calendar\n            </h1>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {upcomingEvents.length} upcoming event{upcomingEvents.length !== 1 ? \"s\" : \"\"} •{\" \"}\n              {todayEvents.length} today\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Events List */}\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-6\">\n          {upcomingEvents.length === 0 ? (\n            <div className=\"text-center max-w-sm mx-auto py-12\">\n              <div className=\"inline-flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 mb-4\">\n                <CalendarIcon className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h2 className=\"text-lg font-medium mb-2\">No upcoming events</h2>\n              <p className=\"text-sm text-muted-foreground mb-6\">\n                Your calendar events will appear here once synced from Google Calendar\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {upcomingEvents.reduce((groups: { [key: string]: CalendarEvent[] }, event) => {\n                const date = format(new Date(event.startTime), \"yyyy-MM-dd\");\n                if (!groups[date]) {\n                  groups[date] = [];\n                }\n                groups[date].push(event);\n                return groups;\n              }, Object.create(null)) &&\n                Object.entries(\n                  upcomingEvents.reduce((groups: { [key: string]: CalendarEvent[] }, event) => {\n                    const date = format(new Date(event.startTime), \"yyyy-MM-dd\");\n                    if (!groups[date]) {\n                      groups[date] = [];\n                    }\n                    groups[date].push(event);\n                    return groups;\n                  }, Object.create(null))\n                ).map(([date, dayEvents]) => (\n                  <div key={date}>\n                    <h3 className=\"text-sm font-semibold mb-3 sticky top-0 bg-background py-2 z-10\">\n                      {formatEventDate(parseISO(date))}\n                    </h3>\n                    <div className=\"space-y-2\">\n                      {(dayEvents as CalendarEvent[]).map((event) => {\n                        const startTime = new Date(event.startTime);\n                        const endTime = new Date(event.endTime);\n                        const duration = Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60));\n\n                        return (\n                          <Card\n                            key={event.id}\n                            className=\"p-4 border-l-4 border-l-primary hover-elevate\"\n                            data-testid={`card-event-${event.id}`}\n                          >\n                            <div className=\"flex items-start justify-between gap-4\">\n                              <div className=\"flex-1 min-w-0\">\n                                <h4 className=\"font-medium mb-1\" data-testid={`text-event-title-${event.id}`}>{event.summary}</h4>\n                                \n                                <div className=\"flex flex-wrap gap-3 text-sm text-muted-foreground\">\n                                  <div className=\"flex items-center gap-1\" data-testid={`text-event-time-${event.id}`}>\n                                    <Clock className=\"h-4 w-4\" />\n                                    <span className=\"font-mono\">\n                                      {format(startTime, \"h:mm a\")} - {format(endTime, \"h:mm a\")}\n                                    </span>\n                                  </div>\n                                  \n                                  {event.location && (\n                                    <div className=\"flex items-center gap-1\" data-testid={`text-event-location-${event.id}`}>\n                                      <MapPin className=\"h-4 w-4\" />\n                                      <span className=\"truncate\">{event.location}</span>\n                                    </div>\n                                  )}\n                                  \n                                  {event.attendees && event.attendees.length > 0 && (\n                                    <div className=\"flex items-center gap-1\" data-testid={`text-event-attendees-${event.id}`}>\n                                      <Users className=\"h-4 w-4\" />\n                                      <span>{event.attendees.length} attendee{event.attendees.length > 1 ? \"s\" : \"\"}</span>\n                                    </div>\n                                  )}\n                                </div>\n\n                                {event.description && (\n                                  <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\" data-testid={`text-event-description-${event.id}`}>\n                                    {event.description}\n                                  </p>\n                                )}\n                              </div>\n\n                              <Badge variant=\"outline\" className=\"flex-shrink-0 text-xs\" data-testid={`badge-duration-${event.id}`}>\n                                {duration} min\n                              </Badge>\n                            </div>\n                          </Card>\n                        );\n                      })}\n                    </div>\n                  </div>\n                ))}\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n","size_bytes":7086},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"design_guidelines.md":{"content":"# Design Guidelines: AI-Powered Inbox & Calendar Assistant\n\n## Design Approach\n\n**Selected Approach**: Design System + Reference Hybrid\n- **Primary System**: Linear Design System (productivity-focused, clean, efficient)\n- **Reference Inspiration**: ChatGPT (conversational interface patterns)\n- **Rationale**: This is a utility-focused productivity tool requiring information density, clear hierarchy, and efficient workflows. Linear's design principles excel at data-heavy applications while ChatGPT provides proven patterns for AI conversation interfaces.\n\n## Core Design Principles\n\n1. **Clarity Over Decoration**: Every element serves a functional purpose\n2. **Information Hierarchy**: Critical data (urgent emails, today's meetings) prominently featured\n3. **Breathing Room**: Strategic whitespace despite information density\n4. **Contextual Intelligence**: AI insights integrated naturally into the interface\n\n## Typography System\n\n**Font Family**: Inter (Google Fonts) - excellent for UI and data display\n- **Primary**: Inter for all interface text\n- **Monospace**: JetBrains Mono for email addresses, timestamps\n\n**Type Scale**:\n- Hero/Page Titles: text-2xl md:text-3xl, font-semibold\n- Section Headers: text-lg md:text-xl, font-semibold\n- Card Titles: text-base, font-medium\n- Body Text: text-sm, font-normal\n- Metadata/Timestamps: text-xs, font-normal\n- Button Text: text-sm, font-medium\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16\n- Tight spacing: p-2, gap-2 (within components)\n- Standard spacing: p-4, gap-4, mb-6 (between related elements)\n- Section spacing: p-8, mb-12, gap-8 (major sections)\n- Page margins: px-6 md:px-8, py-6\n\n**Grid Structure**:\n- Main Layout: Sidebar + Content (two-column)\n- Sidebar: Fixed w-64 on desktop, collapsible on mobile\n- Content Area: flex-1 with max-w-7xl container\n- Chat Interface: Single column, max-w-3xl centered\n\n## Component Library\n\n### Navigation & Layout\n\n**Sidebar Navigation**:\n- Fixed left sidebar (w-64) with sections:\n  - Logo/Brand area (h-16)\n  - Main navigation items (gap-1, py-2)\n  - Secondary actions at bottom\n- Navigation items: Rounded rectangles (rounded-lg), px-3 py-2\n- Active state: Subtle background treatment\n- Icons: 20px (Heroicons outline style)\n\n**Top Bar**:\n- h-16, border bottom\n- Contains: Breadcrumbs, search, user profile\n- Sticky positioning (sticky top-0)\n\n### Chat Interface (Primary Interaction)\n\n**Chat Container**:\n- Centered column: max-w-3xl mx-auto\n- Conversation area: flex flex-col gap-6, py-8\n- Input area: Fixed bottom, w-full, p-4\n\n**Message Bubbles**:\n- User messages: Align right, max-w-2xl\n- AI responses: Align left, max-w-2xl\n- Padding: px-4 py-3\n- Rounded: rounded-2xl\n- Typography: text-sm leading-relaxed\n\n**Input Field**:\n- Multi-line textarea with auto-expand\n- Min height: h-12\n- Border: rounded-xl, border\n- Padding: px-4 py-3\n- Send button: Positioned absolute right, icon-only, rounded-lg\n\n### Email Components\n\n**Email List View**:\n- Card-based layout: Stack of email cards (gap-2)\n- Each card: p-4, rounded-lg, border\n- Hover state: Subtle elevation change\n- Structure per card:\n  - Sender + timestamp row (flex justify-between)\n  - Subject line (font-medium, truncate)\n  - Preview text (text-sm, line-clamp-2)\n  - Category badges + urgency flags (flex gap-2, mt-2)\n\n**Category Badges**:\n- Small pills: px-2 py-1, rounded-full, text-xs\n- Types: Urgent, Important, Promotional, Social, Updates\n- Icon + label combination\n\n**Email Detail View**:\n- Full-width container with max-w-4xl\n- Header section: Sender, recipient, timestamp (grid layout)\n- Action buttons: Reply, Forward, Archive (flex gap-2)\n- Email body: Proper email rendering with max-w-prose\n- AI Summary panel: Border-left accent, pl-4, italic, text-sm\n\n### Calendar Components\n\n**Calendar Grid View**:\n- Week view: 7-column grid (grid-cols-7)\n- Day headers: Sticky, font-medium, text-center\n- Time slots: Grid rows with hourly divisions\n- Event blocks: Absolute positioned, rounded-md, p-2\n- Event content: text-xs, truncate\n\n**Mini Calendar Sidebar**:\n- Month view: Compact grid (w-64)\n- Date cells: Square aspect ratio, text-center\n- Today indicator: Border treatment\n- Selected date: Background treatment\n\n**Event Cards (List View)**:\n- Compact cards: px-3 py-2, border-left-4 (time-based accent)\n- Time + title: flex items-center gap-2\n- Attendees: Small avatar stack\n- Duration badge: text-xs\n\n### Dashboard & Visualizations\n\n**Stats Cards**:\n- Grid layout: grid-cols-1 md:grid-cols-2 lg:grid-cols-4, gap-4\n- Each card: p-6, rounded-lg, border\n- Structure: Large number (text-3xl font-bold) + label (text-sm) + trend indicator\n\n**Email Category Breakdown**:\n- Horizontal bar chart representation\n- Each category: flex items-center justify-between, py-3\n- Category label + count + visual bar (h-2, rounded-full)\n\n**Timeline View (Combined Inbox + Calendar)**:\n- Vertical timeline: border-left accent on container\n- Items chronologically ordered: gap-6\n- Each item: pl-6, relative (with timeline dot)\n- Alternating email cards and calendar events\n- Time markers: Sticky positioned, text-xs\n\n### Forms & Inputs\n\n**Search Bar**:\n- Full-width on mobile, w-96 on desktop\n- Height: h-10\n- Icon prefix: Search icon, pl-10\n- Rounded: rounded-lg\n- Placeholder: \"Search emails, events, or ask AI...\"\n\n**AI Prompt Suggestions**:\n- Horizontal scroll on mobile: flex gap-2, overflow-x-auto\n- Suggestion pills: px-4 py-2, rounded-full, border, text-sm\n- Examples: \"Summarize today's emails\", \"Find free time this week\"\n\n### Data Displays\n\n**Empty States**:\n- Centered container: max-w-sm mx-auto, text-center, py-12\n- Icon: Large (h-16 w-16), mx-auto, mb-4\n- Heading: text-lg font-medium\n- Description: text-sm, mb-6\n- CTA button if applicable\n\n**Loading States**:\n- Skeleton screens matching component structure\n- Animated pulse: animate-pulse\n- Preserve layout dimensions\n\n## Animations\n\n**Minimal, Purposeful Animations**:\n- Page transitions: None (instant navigation)\n- Modal/overlay entry: Fade in (duration-200)\n- Hover states: Subtle opacity or background shift (transition-colors duration-150)\n- Chat messages: Slide up fade in (duration-300)\n- Avoid: Complex scroll animations, parallax effects, excessive micro-interactions\n\n## Icons\n\n**Library**: Heroicons (outline style for navigation, solid for actions)\n- Sizes: 16px (badges), 20px (navigation), 24px (primary actions)\n- Consistent stroke width throughout\n\n## Images\n\n**No Hero Image**: This is a utility application, not a marketing site\n**Avatar Images**: User profile, email senders - small circular (h-8 w-8, rounded-full)\n**Empty State Illustrations**: Simple, minimal line illustrations for empty inbox/calendar states\n\n## Accessibility\n\n- Focus states: ring-2 ring-offset-2 on all interactive elements\n- Semantic HTML: Proper heading hierarchy, ARIA labels\n- Keyboard navigation: Full keyboard support for chat, email list, calendar\n- Form labels: Always visible, properly associated\n- Interactive element sizing: Minimum h-10 for touch targets","size_bytes":7025},"client/src/components/app-sidebar.tsx":{"content":"import { MessageSquare, Inbox, Calendar, BarChart3, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\n\nconst menuItems = [\n  {\n    title: \"Chat\",\n    url: \"/\",\n    icon: MessageSquare,\n  },\n  {\n    title: \"Inbox\",\n    url: \"/inbox\",\n    icon: Inbox,\n  },\n  {\n    title: \"Calendar\",\n    url: \"/calendar\",\n    icon: Calendar,\n  },\n  {\n    title: \"Analytics\",\n    url: \"/analytics\",\n    icon: BarChart3,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-4 border-b border-sidebar-border\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-md bg-primary\">\n            <MessageSquare className=\"h-4 w-4 text-primary-foreground\" />\n          </div>\n          <div className=\"flex flex-col\">\n            <span className=\"text-sm font-semibold\">Inbox AI</span>\n            <span className=\"text-xs text-muted-foreground\">Your Assistant</span>\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url} data-testid={`nav-${item.title.toLowerCase()}`}>\n                    <Link href={item.url}>\n                      <item.icon className=\"h-5 w-5\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-4 border-t border-sidebar-border\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton asChild data-testid=\"nav-settings\">\n              <Link href=\"/settings\">\n                <Settings className=\"h-5 w-5\" />\n                <span>Settings</span>\n              </Link>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":2527},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/settings.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { Settings as SettingsIcon, RefreshCw, Trash2, Mail, Calendar as CalendarIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n\n  const syncAll = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/sync-all\", {});\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Sync Complete\",\n        description: `Synced ${data.emailCount} emails and ${data.eventCount} calendar events`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/email\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/calendar\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sync Failed\",\n        description: error.message || \"Failed to sync data\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const syncEmails = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/emails/sync\", {});\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Emails Synced\",\n        description: `Synced ${data.count} emails from Gmail`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/email\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Email Sync Failed\",\n        description: error.message || \"Failed to sync emails\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const syncCalendar = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/calendar/sync\", {});\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Calendar Synced\",\n        description: `Synced ${data.count} events from Google Calendar`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/calendar\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Calendar Sync Failed\",\n        description: error.message || \"Failed to sync calendar\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearChat = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"DELETE\", \"/api/chat/messages\", {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Chat Cleared\",\n        description: \"All chat messages have been deleted\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/messages\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Clear Failed\",\n        description: error.message || \"Failed to clear chat\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"flex flex-col h-full overflow-auto\">\n      <div className=\"border-b border-border p-6 bg-background sticky top-0 z-10\">\n        <h1 className=\"text-2xl font-semibold flex items-center gap-2\">\n          <SettingsIcon className=\"h-6 w-6 text-primary\" />\n          Settings\n        </h1>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          Manage your Gmail and Calendar sync settings\n        </p>\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Sync Data</CardTitle>\n            <CardDescription>\n              Fetch the latest emails and calendar events from your Google account\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-medium mb-1\">Sync Everything</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Sync both Gmail and Google Calendar at once\n                </p>\n              </div>\n              <Button\n                onClick={() => syncAll.mutate()}\n                disabled={syncAll.isPending}\n                data-testid=\"button-sync-all\"\n              >\n                {syncAll.isPending ? (\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                )}\n                Sync All\n              </Button>\n            </div>\n\n            <div className=\"border-t border-border pt-4\" />\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"h-5 w-5 text-muted-foreground\" />\n                <div>\n                  <h3 className=\"font-medium mb-1\">Gmail Only</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Fetch recent emails from your inbox\n                  </p>\n                </div>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => syncEmails.mutate()}\n                disabled={syncEmails.isPending}\n                data-testid=\"button-sync-emails\"\n              >\n                {syncEmails.isPending ? (\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                )}\n                Sync Emails\n              </Button>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <CalendarIcon className=\"h-5 w-5 text-muted-foreground\" />\n                <div>\n                  <h3 className=\"font-medium mb-1\">Google Calendar Only</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Fetch upcoming events from your calendar\n                  </p>\n                </div>\n              </div>\n              <Button\n                variant=\"outline\"\n                onClick={() => syncCalendar.mutate()}\n                disabled={syncCalendar.isPending}\n                data-testid=\"button-sync-calendar\"\n              >\n                {syncCalendar.isPending ? (\n                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                )}\n                Sync Calendar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Data Management</CardTitle>\n            <CardDescription>\n              Clear stored data and conversation history\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-medium mb-1\">Clear Chat History</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Delete all conversation messages with the assistant\n                </p>\n              </div>\n              <Button\n                variant=\"destructive\"\n                onClick={() => clearChat.mutate()}\n                disabled={clearChat.isPending}\n                data-testid=\"button-clear-chat\"\n              >\n                <Trash2 className=\"h-4 w-4 mr-2\" />\n                Clear Chat\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>About</CardTitle>\n            <CardDescription>\n              Your intelligent email and calendar assistant\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 text-sm\">\n              <p>\n                <span className=\"font-medium\">Version:</span> 1.0.0\n              </p>\n              <p className=\"text-muted-foreground\">\n                This assistant uses rule-based intelligence to help you manage your Gmail inbox\n                and Google Calendar. All processing happens locally for your privacy.\n              </p>\n              <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n                <h4 className=\"font-medium mb-2\">Features:</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-muted-foreground\">\n                  <li>Smart email categorization (urgent, important, promotional, etc.)</li>\n                  <li>Automatic urgency detection</li>\n                  <li>Draft response generation</li>\n                  <li>Free time slot finder</li>\n                  <li>Visual analytics and insights</li>\n                  <li>ChatGPT-style conversation interface</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9135},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { getUncachableGmailClient, getAuthUrl, handleAuthCallback, isAuthenticated } from \"./gmail-client\";\nimport { getUncachableGoogleCalendarClient, setTokens as setCalendarTokens } from \"./calendar-client\";\nimport {\n  categorizeEmail,\n  isEmailUrgent,\n  summarizeEmail,\n  generateDraftResponse,\n  processChatQuery,\n  findFreeSlots,\n} from \"./intelligence\";\nimport type { InsertEmail, InsertCalendarEvent, InsertChatMessage } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // ============ OAUTH ROUTES ============\n  \n  // Check if user is authenticated\n  app.get(\"/api/auth/status\", (req, res) => {\n    res.json({ authenticated: isAuthenticated() });\n  });\n  \n  // Get OAuth URL\n  app.get(\"/api/auth/google/url\", (req, res) => {\n    try {\n      const authUrl = getAuthUrl();\n      res.json({ url: authUrl });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n  \n  // OAuth callback\n  app.get(\"/api/auth/google/callback\", async (req, res) => {\n    try {\n      const code = req.query.code as string;\n      if (!code) {\n        return res.status(400).send('Missing authorization code');\n      }\n      \n      const tokens = await handleAuthCallback(code);\n      // Also set tokens for calendar client\n      setCalendarTokens(tokens);\n      \n      // Redirect back to the app\n      res.send(`\n        <html>\n          <body>\n            <h1>Authentication Successful!</h1>\n            <p>You can now close this window and return to the app.</p>\n            <script>\n              window.opener?.postMessage({ type: 'gmail-auth-success' }, '*');\n              setTimeout(() => window.close(), 2000);\n            </script>\n          </body>\n        </html>\n      `);\n    } catch (error: any) {\n      res.status(500).send(`Authentication failed: ${error.message}`);\n    }\n  });\n  \n  // ============ EMAIL ROUTES ============\n  \n  // Sync emails from Gmail\n  app.post(\"/api/emails/sync\", async (req, res) => {\n    try {\n      const gmail = await getUncachableGmailClient();\n      \n      // Fetch recent emails (last 50)\n      const response = await gmail.users.messages.list({\n        userId: \"me\",\n        maxResults: 50,\n      });\n\n      const messages = response.data.messages || [];\n      const syncedEmails = [];\n\n      // Process each message\n      for (const message of messages.slice(0, 20)) { // Limit to 20 for performance\n        try {\n          const fullMessage = await gmail.users.messages.get({\n            userId: \"me\",\n            id: message.id!,\n            format: \"full\",\n          });\n\n          const headers = fullMessage.data.payload?.headers || [];\n          const getHeader = (name: string) =>\n            headers.find(h => h.name?.toLowerCase() === name.toLowerCase())?.value || \"\";\n\n          const from = getHeader(\"from\");\n          const to = getHeader(\"to\");\n          const subject = getHeader(\"subject\") || \"(No Subject)\";\n          const date = getHeader(\"date\");\n\n          // Get email body\n          let body = \"\";\n          const parts = fullMessage.data.payload?.parts || [];\n          \n          if (fullMessage.data.payload?.body?.data) {\n            body = Buffer.from(fullMessage.data.payload.body.data, \"base64\").toString(\"utf-8\");\n          } else if (parts.length > 0) {\n            const textPart = parts.find(p => p.mimeType === \"text/plain\");\n            if (textPart?.body?.data) {\n              body = Buffer.from(textPart.body.data, \"base64\").toString(\"utf-8\");\n            }\n          }\n\n          // Clean body (limit length)\n          body = body.substring(0, 5000);\n          const snippet = summarizeEmail(subject, body);\n\n          // Apply intelligence\n          const category = categorizeEmail(from, subject, body);\n          const urgent = isEmailUrgent(from, subject, body);\n\n          // Get labels\n          const labels = fullMessage.data.labelIds || [];\n          const isRead = !labels.includes(\"UNREAD\");\n          const isStarred = labels.includes(\"STARRED\");\n\n          // Count attachments\n          const attachmentCount = parts.filter(p => p.filename && p.filename.length > 0).length;\n\n          const emailData: InsertEmail = {\n            messageId: fullMessage.data.id!,\n            threadId: fullMessage.data.threadId || fullMessage.data.id!,\n            subject,\n            from,\n            to,\n            snippet,\n            body,\n            date: date ? new Date(date) : new Date(),\n            isRead,\n            isStarred,\n            category,\n            isUrgent: urgent,\n            labels,\n            attachmentCount,\n          };\n\n          const createdEmail = await storage.createEmail(emailData);\n          syncedEmails.push(createdEmail);\n        } catch (err) {\n          console.error(\"Error processing message:\", err);\n          continue;\n        }\n      }\n\n      res.json({ \n        success: true, \n        count: syncedEmails.length,\n        emails: syncedEmails \n      });\n    } catch (error: any) {\n      console.error(\"Gmail sync error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get all emails\n  app.get(\"/api/emails\", async (req, res) => {\n    try {\n      const emails = await storage.getEmails();\n      res.json(emails);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get email by ID\n  app.get(\"/api/emails/:id\", async (req, res) => {\n    try {\n      const email = await storage.getEmail(req.params.id);\n      if (!email) {\n        return res.status(404).json({ error: \"Email not found\" });\n      }\n      res.json(email);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get draft response for an email\n  app.get(\"/api/emails/:id/draft\", async (req, res) => {\n    try {\n      const email = await storage.getEmail(req.params.id);\n      if (!email) {\n        return res.status(404).json({ error: \"Email not found\" });\n      }\n      \n      const draft = generateDraftResponse(email);\n      res.json(draft);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============ CALENDAR ROUTES ============\n\n  // Sync calendar events from Google Calendar\n  app.post(\"/api/calendar/sync\", async (req, res) => {\n    try {\n      const calendar = await getUncachableGoogleCalendarClient();\n\n      // Fetch events for the next 30 days\n      const now = new Date();\n      const future = new Date();\n      future.setDate(future.getDate() + 30);\n\n      const response = await calendar.events.list({\n        calendarId: \"primary\",\n        timeMin: now.toISOString(),\n        timeMax: future.toISOString(),\n        maxResults: 100,\n        singleEvents: true,\n        orderBy: \"startTime\",\n      });\n\n      const events = response.data.items || [];\n      const syncedEvents = [];\n\n      for (const event of events) {\n        const eventData: InsertCalendarEvent = {\n          eventId: event.id!,\n          summary: event.summary || \"(No Title)\",\n          description: event.description || \"\",\n          location: event.location || \"\",\n          startTime: event.start?.dateTime ? new Date(event.start.dateTime) : new Date(event.start?.date!),\n          endTime: event.end?.dateTime ? new Date(event.end.dateTime) : new Date(event.end?.date!),\n          attendees: event.attendees?.map(a => a.email || \"\") || [],\n          organizer: event.organizer?.email || \"\",\n          status: event.status || \"confirmed\",\n          isAllDay: !!event.start?.date,\n          colorId: event.colorId || \"\",\n        };\n\n        const createdEvent = await storage.createCalendarEvent(eventData);\n        syncedEvents.push(createdEvent);\n      }\n\n      res.json({ \n        success: true, \n        count: syncedEvents.length,\n        events: syncedEvents \n      });\n    } catch (error: any) {\n      console.error(\"Calendar sync error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get all calendar events\n  app.get(\"/api/calendar/events\", async (req, res) => {\n    try {\n      const events = await storage.getCalendarEvents();\n      res.json(events);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get upcoming events\n  app.get(\"/api/calendar/upcoming\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const events = await storage.getUpcomingEvents(limit);\n      res.json(events);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Find free time slots\n  app.get(\"/api/calendar/free-slots\", async (req, res) => {\n    try {\n      const durationMinutes = parseInt(req.query.duration as string) || 60;\n      const daysAhead = parseInt(req.query.days as string) || 7;\n      \n      const events = await storage.getCalendarEvents();\n      const freeSlots = findFreeSlots(\n        events.map(e => ({ \n          startTime: new Date(e.startTime), \n          endTime: new Date(e.endTime) \n        })),\n        durationMinutes,\n        daysAhead\n      );\n      \n      res.json(freeSlots);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============ CHAT ROUTES ============\n\n  // Get chat messages\n  app.get(\"/api/chat/messages\", async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages();\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Send chat message and get AI response\n  app.post(\"/api/chat/send\", async (req, res) => {\n    try {\n      const { content } = req.body;\n\n      if (!content || typeof content !== \"string\") {\n        return res.status(400).json({ error: \"Content is required\" });\n      }\n\n      // Save user message\n      const userMessage: InsertChatMessage = {\n        role: \"user\",\n        content: content.trim(),\n      };\n      await storage.createChatMessage(userMessage);\n\n      // Generate AI response using Gemini AI\n      const { generateChatResponse } = await import(\"./ai-service\");\n      const { response: responseContent, suggestions } = await generateChatResponse(content, true);\n\n      // Save AI response\n      const aiMessage: InsertChatMessage = {\n        role: \"assistant\",\n        content: responseContent,\n        metadata: suggestions ? JSON.stringify({ suggestions }) : undefined,\n      };\n      await storage.createChatMessage(aiMessage);\n\n      res.json({ success: true, suggestions });\n    } catch (error: any) {\n      console.error(\"Chat error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Clear chat history\n  app.delete(\"/api/chat/messages\", async (req, res) => {\n    try {\n      await storage.clearChatHistory();\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============ ANALYTICS ROUTES ============\n\n  // Get email analytics\n  app.get(\"/api/analytics/email\", async (req, res) => {\n    try {\n      const analytics = await storage.getEmailAnalytics();\n      res.json(analytics);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get calendar analytics\n  app.get(\"/api/analytics/calendar\", async (req, res) => {\n    try {\n      const analytics = await storage.getCalendarAnalytics();\n      res.json(analytics);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============ AI ACTION ROUTES ============\n\n  // Send email via AI\n  app.post(\"/api/actions/send-email\", async (req, res) => {\n    try {\n      const { to, subject, body, cc, bcc } = req.body;\n\n      if (!to || !subject || !body) {\n        return res.status(400).json({ error: \"Missing required fields: to, subject, body\" });\n      }\n\n      const { executeSendEmail } = await import(\"./ai-actions\");\n      const result = await executeSendEmail({ type: 'send_email', to, subject, body, cc, bcc });\n\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Send email error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Modify email (mark read/unread, delete, archive, star)\n  app.post(\"/api/actions/modify-email\", async (req, res) => {\n    try {\n      const { emailId, action } = req.body;\n\n      if (!emailId || !action) {\n        return res.status(400).json({ error: \"Missing required fields: emailId, action\" });\n      }\n\n      const validActions = ['mark_read', 'mark_unread', 'delete', 'archive', 'star', 'unstar'];\n      if (!validActions.includes(action)) {\n        return res.status(400).json({ error: `Invalid action. Must be one of: ${validActions.join(', ')}` });\n      }\n\n      const { executeEmailModify } = await import(\"./ai-actions\");\n      const result = await executeEmailModify({ type: action as any, emailId });\n\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Modify email error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Calendar actions (create, update, delete events)\n  app.post(\"/api/actions/calendar\", async (req, res) => {\n    try {\n      const { action, eventData, eventId } = req.body;\n\n      if (!action) {\n        return res.status(400).json({ error: \"Missing required field: action\" });\n      }\n\n      const validActions = ['create_event', 'update_event', 'delete_event'];\n      if (!validActions.includes(action)) {\n        return res.status(400).json({ error: `Invalid action. Must be one of: ${validActions.join(', ')}` });\n      }\n\n      const { executeCalendarAction } = await import(\"./ai-actions\");\n      const result = await executeCalendarAction({ type: action as any, eventData, eventId });\n\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Calendar action error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ============ INITIAL DATA SYNC ============\n  \n  // Endpoint to trigger initial sync\n  app.post(\"/api/sync-all\", async (req, res) => {\n    try {\n      // Check if authenticated\n      if (!isAuthenticated()) {\n        return res.status(401).json({ \n          error: \"Not authenticated\",\n          needsAuth: true \n        });\n      }\n\n      // Sync emails from Gmail\n      const gmail = await getUncachableGmailClient();\n      const emailResponse = await gmail.users.messages.list({\n        userId: \"me\",\n        maxResults: 20,\n      });\n\n      const messages = emailResponse.data.messages || [];\n      let emailCount = 0;\n\n      for (const message of messages) {\n        try {\n          const fullMessage = await gmail.users.messages.get({\n            userId: \"me\",\n            id: message.id!,\n            format: \"full\",\n          });\n\n          const headers = fullMessage.data.payload?.headers || [];\n          const getHeader = (name: string) =>\n            headers.find(h => h.name?.toLowerCase() === name.toLowerCase())?.value || \"\";\n\n          const from = getHeader(\"from\");\n          const to = getHeader(\"to\");\n          const subject = getHeader(\"subject\") || \"(No Subject)\";\n          const date = getHeader(\"date\");\n\n          let body = \"\";\n          const parts = fullMessage.data.payload?.parts || [];\n          \n          if (fullMessage.data.payload?.body?.data) {\n            body = Buffer.from(fullMessage.data.payload.body.data, \"base64\").toString(\"utf-8\");\n          } else if (parts.length > 0) {\n            const textPart = parts.find(p => p.mimeType === \"text/plain\");\n            if (textPart?.body?.data) {\n              body = Buffer.from(textPart.body.data, \"base64\").toString(\"utf-8\");\n            }\n          }\n\n          body = body.substring(0, 5000);\n          const snippet = summarizeEmail(subject, body);\n          const category = categorizeEmail(from, subject, body);\n          const urgent = isEmailUrgent(from, subject, body);\n\n          const labels = fullMessage.data.labelIds || [];\n          const isRead = !labels.includes(\"UNREAD\");\n          const isStarred = labels.includes(\"STARRED\");\n\n          const attachmentCount = parts.filter(p => p.filename && p.filename.length > 0).length;\n\n          const emailData: InsertEmail = {\n            messageId: fullMessage.data.id!,\n            threadId: fullMessage.data.threadId || fullMessage.data.id!,\n            subject,\n            from,\n            to,\n            snippet,\n            body,\n            date: date ? new Date(date) : new Date(),\n            isRead,\n            isStarred,\n            category,\n            isUrgent: urgent,\n            labels,\n            attachmentCount,\n          };\n\n          await storage.createEmail(emailData);\n          emailCount++;\n        } catch (err) {\n          console.error(\"Error syncing email:\", err);\n          continue;\n        }\n      }\n\n      // Sync calendar events\n      const calendar = await getUncachableGoogleCalendarClient();\n      const now = new Date();\n      const future = new Date();\n      future.setDate(future.getDate() + 30);\n\n      const calendarResponse = await calendar.events.list({\n        calendarId: \"primary\",\n        timeMin: now.toISOString(),\n        timeMax: future.toISOString(),\n        maxResults: 50,\n        singleEvents: true,\n        orderBy: \"startTime\",\n      });\n\n      const events = calendarResponse.data.items || [];\n      let eventCount = 0;\n\n      for (const event of events) {\n        const eventData: InsertCalendarEvent = {\n          eventId: event.id!,\n          summary: event.summary || \"(No Title)\",\n          description: event.description || \"\",\n          location: event.location || \"\",\n          startTime: event.start?.dateTime ? new Date(event.start.dateTime) : new Date(event.start?.date!),\n          endTime: event.end?.dateTime ? new Date(event.end.dateTime) : new Date(event.end?.date!),\n          attendees: event.attendees?.map(a => a.email || \"\") || [],\n          organizer: event.organizer?.email || \"\",\n          status: event.status || \"confirmed\",\n          isAllDay: !!event.start?.date,\n          colorId: event.colorId || \"\",\n        };\n\n        await storage.createCalendarEvent(eventData);\n        eventCount++;\n      }\n\n      res.json({ \n        success: true, \n        emailCount,\n        eventCount,\n      });\n    } catch (error: any) {\n      console.error(\"Sync all error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Old sample data implementation below (keeping for reference, but commented out)\n  /*\n  app.post(\"/api/sync-all-sample\", async (req, res) => {\n    try {\n      // Generate sample emails\n      const sampleEmails = [\n        {\n          from: \"sarah.johnson@techcorp.com\",\n          to: \"me@example.com\",\n          subject: \"Q4 Budget Review Meeting\",\n          body: \"Hi team,\\n\\nI wanted to schedule a meeting to review our Q4 budget allocations. We need to discuss the resource allocation for the upcoming projects and ensure we're aligned with our financial goals.\\n\\nBest regards,\\nSarah\",\n          category: \"important\",\n          isUrgent: true,\n          isRead: false,\n          isStarred: true,\n          daysAgo: 0,\n        },\n        {\n          from: \"newsletter@techinsider.com\",\n          to: \"me@example.com\",\n          subject: \"Weekly Tech Digest: AI Breakthroughs & Industry News\",\n          body: \"This week in tech: Major AI developments, cloud infrastructure updates, and the latest in cybersecurity trends. Read our comprehensive analysis...\",\n          category: \"newsletter\",\n          isUrgent: false,\n          isRead: false,\n          isStarred: false,\n          daysAgo: 1,\n        },\n        {\n          from: \"alex.martinez@company.io\",\n          to: \"me@example.com\",\n          subject: \"Project Timeline Update\",\n          body: \"Hey,\\n\\nJust wanted to update you on the project timeline. We're slightly ahead of schedule and should be able to deliver by next Friday instead of the following Monday.\\n\\nAlex\",\n          category: \"important\",\n          isUrgent: false,\n          isRead: true,\n          isStarred: false,\n          daysAgo: 1,\n        },\n        {\n          from: \"notifications@github.com\",\n          to: \"me@example.com\",\n          subject: \"[replit/agent] New PR: Fix authentication bug\",\n          body: \"A new pull request has been opened...\",\n          category: \"updates\",\n          isUrgent: false,\n          isRead: true,\n          isStarred: false,\n          daysAgo: 2,\n        },\n        {\n          from: \"team@slack.com\",\n          to: \"me@example.com\",\n          subject: \"You have 15 unread messages in #engineering\",\n          body: \"Catch up on the latest conversations in your workspace...\",\n          category: \"social\",\n          isUrgent: false,\n          isRead: false,\n          isStarred: false,\n          daysAgo: 2,\n        },\n        {\n          from: \"offers@retailstore.com\",\n          to: \"me@example.com\",\n          subject: \"🎉 Flash Sale: 50% Off Everything!\",\n          body: \"Limited time offer! Get 50% off all items in our store...\",\n          category: \"promotional\",\n          isUrgent: false,\n          isRead: true,\n          isStarred: false,\n          daysAgo: 3,\n        },\n        {\n          from: \"hr@company.com\",\n          to: \"me@example.com\",\n          subject: \"Important: Benefits Enrollment Deadline\",\n          body: \"This is a reminder that the benefits enrollment deadline is approaching. Please review your options and make your selections by Friday.\",\n          category: \"urgent\",\n          isUrgent: true,\n          isRead: false,\n          isStarred: true,\n          daysAgo: 0,\n        },\n        {\n          from: \"ceo@company.com\",\n          to: \"me@example.com\",\n          subject: \"Company All-Hands Meeting - Friday 2PM\",\n          body: \"Dear team,\\n\\nI'm excited to announce our quarterly all-hands meeting this Friday at 2 PM. We'll be discussing our achievements, upcoming initiatives, and Q&A session.\\n\\nLooking forward to seeing everyone there!\\n\\nBest,\\nCEO\",\n          category: \"important\",\n          isUrgent: true,\n          isRead: false,\n          isStarred: true,\n          daysAgo: 0,\n        },\n      ];\n\n      let emailCount = 0;\n      for (const sample of sampleEmails) {\n        const date = new Date();\n        date.setDate(date.getDate() - sample.daysAgo);\n        date.setHours(Math.floor(Math.random() * 12) + 8, Math.floor(Math.random() * 60));\n\n        const emailData: InsertEmail = {\n          messageId: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          threadId: `thread_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          subject: sample.subject,\n          from: sample.from,\n          to: sample.to,\n          snippet: sample.body.substring(0, 100) + \"...\",\n          body: sample.body,\n          date,\n          isRead: sample.isRead,\n          isStarred: sample.isStarred,\n          category: sample.category,\n          isUrgent: sample.isUrgent,\n          labels: sample.isRead ? [\"READ\"] : [\"UNREAD\"],\n          attachmentCount: 0,\n        };\n\n        await storage.createEmail(emailData);\n        emailCount++;\n      }\n\n      // Generate sample calendar events\n      const sampleEvents = [\n        {\n          summary: \"Team Standup\",\n          description: \"Daily team standup meeting\",\n          location: \"Conference Room A\",\n          daysFromNow: 0,\n          startHour: 9,\n          duration: 0.5,\n          attendees: [\"sarah.johnson@techcorp.com\", \"alex.martinez@company.io\"],\n        },\n        {\n          summary: \"Product Review\",\n          description: \"Review new product features and roadmap\",\n          location: \"Zoom Meeting\",\n          daysFromNow: 1,\n          startHour: 14,\n          duration: 2,\n          attendees: [\"sarah.johnson@techcorp.com\", \"product@company.com\"],\n        },\n        {\n          summary: \"1:1 with Manager\",\n          description: \"Weekly one-on-one meeting\",\n          location: \"Manager's Office\",\n          daysFromNow: 2,\n          startHour: 15,\n          duration: 1,\n          attendees: [\"manager@company.com\"],\n        },\n        {\n          summary: \"Company All-Hands\",\n          description: \"Quarterly company meeting\",\n          location: \"Main Auditorium\",\n          daysFromNow: 4,\n          startHour: 14,\n          duration: 2,\n          attendees: [\"ceo@company.com\", \"all@company.com\"],\n        },\n        {\n          summary: \"Client Demo\",\n          description: \"Demo new features to client\",\n          location: \"Google Meet\",\n          daysFromNow: 5,\n          startHour: 10,\n          duration: 1.5,\n          attendees: [\"client@customer.com\", \"sales@company.com\"],\n        },\n      ];\n\n      let eventCount = 0;\n      for (const sample of sampleEvents) {\n        const startTime = new Date();\n        startTime.setDate(startTime.getDate() + sample.daysFromNow);\n        startTime.setHours(sample.startHour, 0, 0, 0);\n        \n        const endTime = new Date(startTime);\n        endTime.setHours(endTime.getHours() + Math.floor(sample.duration));\n        endTime.setMinutes(endTime.getMinutes() + ((sample.duration % 1) * 60));\n\n        const eventData: InsertCalendarEvent = {\n          eventId: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          summary: sample.summary,\n          description: sample.description,\n          location: sample.location,\n          startTime,\n          endTime,\n          attendees: sample.attendees,\n          organizer: \"me@example.com\",\n          status: \"confirmed\",\n          isAllDay: false,\n          colorId: \"\",\n        };\n\n        await storage.createCalendarEvent(eventData);\n        eventCount++;\n      }\n\n      res.json({ \n        success: true, \n        emailCount,\n        eventCount,\n      });\n    } catch (error: any) {\n      console.error(\"Sync all error:\", error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n  */\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":26104},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/calendar-client.ts":{"content":"// Google Calendar OAuth integration\nimport { google } from 'googleapis';\n\nlet cachedTokens: any = null;\n\nfunction getOAuth2Client() {\n  const clientId = process.env.GOOGLE_CLIENT_ID;\n  const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  const redirectUri = `${process.env.REPLIT_DEV_DOMAIN || 'http://localhost:5000'}/api/auth/google/callback`;\n\n  if (!clientId || !clientSecret) {\n    throw new Error('Google OAuth credentials not configured. Please add GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET to your secrets.');\n  }\n\n  return new google.auth.OAuth2(clientId, clientSecret, redirectUri);\n}\n\nexport function setTokens(tokens: any) {\n  cachedTokens = tokens;\n}\n\nexport function isAuthenticated() {\n  return cachedTokens !== null;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableGoogleCalendarClient() {\n  if (!cachedTokens) {\n    throw new Error('Google Calendar not authenticated. Please authenticate first.');\n  }\n\n  const oauth2Client = getOAuth2Client();\n  oauth2Client.setCredentials(cachedTokens);\n\n  return google.calendar({ version: 'v3', auth: oauth2Client });\n}\n","size_bytes":1233},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"server/storage.ts":{"content":"import {\n  type Email,\n  type InsertEmail,\n  type CalendarEvent,\n  type InsertCalendarEvent,\n  type ChatMessage,\n  type InsertChatMessage,\n  type EmailAnalytics,\n  type CalendarAnalytics,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Email operations\n  getEmails(): Promise<Email[]>;\n  getEmail(id: string): Promise<Email | undefined>;\n  createEmail(email: InsertEmail): Promise<Email>;\n  updateEmail(id: string, updates: Partial<Email>): Promise<Email | undefined>;\n  deleteEmail(id: string): Promise<boolean>;\n  getEmailsByCategory(category: string): Promise<Email[]>;\n  getUrgentEmails(): Promise<Email[]>;\n  getUnreadEmails(): Promise<Email[]>;\n\n  // Calendar operations\n  getCalendarEvents(): Promise<CalendarEvent[]>;\n  getCalendarEvent(id: string): Promise<CalendarEvent | undefined>;\n  createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent>;\n  updateCalendarEvent(id: string, updates: Partial<CalendarEvent>): Promise<CalendarEvent | undefined>;\n  deleteCalendarEvent(id: string): Promise<boolean>;\n  getUpcomingEvents(limit?: number): Promise<CalendarEvent[]>;\n  getTodayEvents(): Promise<CalendarEvent[]>;\n\n  // Chat operations\n  getChatMessages(): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  clearChatHistory(): Promise<void>;\n\n  // Analytics\n  getEmailAnalytics(): Promise<EmailAnalytics>;\n  getCalendarAnalytics(): Promise<CalendarAnalytics>;\n}\n\nexport class MemStorage implements IStorage {\n  private emails: Map<string, Email>;\n  private calendarEvents: Map<string, CalendarEvent>;\n  private chatMessages: ChatMessage[];\n\n  constructor() {\n    this.emails = new Map();\n    this.calendarEvents = new Map();\n    this.chatMessages = [];\n  }\n\n  // Email operations\n  async getEmails(): Promise<Email[]> {\n    return Array.from(this.emails.values()).sort(\n      (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n  }\n\n  async getEmail(id: string): Promise<Email | undefined> {\n    return this.emails.get(id);\n  }\n\n  async createEmail(insertEmail: InsertEmail): Promise<Email> {\n    const id = randomUUID();\n    const email: Email = { \n      ...insertEmail, \n      id,\n      date: insertEmail.date || new Date(),\n    };\n    this.emails.set(id, email);\n    return email;\n  }\n\n  async updateEmail(id: string, updates: Partial<Email>): Promise<Email | undefined> {\n    const email = this.emails.get(id);\n    if (!email) return undefined;\n    \n    const updated = { ...email, ...updates };\n    this.emails.set(id, updated);\n    return updated;\n  }\n\n  async deleteEmail(id: string): Promise<boolean> {\n    return this.emails.delete(id);\n  }\n\n  async getEmailsByCategory(category: string): Promise<Email[]> {\n    return Array.from(this.emails.values()).filter(\n      (email) => email.category === category\n    );\n  }\n\n  async getUrgentEmails(): Promise<Email[]> {\n    return Array.from(this.emails.values()).filter(\n      (email) => email.isUrgent\n    );\n  }\n\n  async getUnreadEmails(): Promise<Email[]> {\n    return Array.from(this.emails.values()).filter(\n      (email) => !email.isRead\n    );\n  }\n\n  // Calendar operations\n  async getCalendarEvents(): Promise<CalendarEvent[]> {\n    return Array.from(this.calendarEvents.values()).sort(\n      (a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime()\n    );\n  }\n\n  async getCalendarEvent(id: string): Promise<CalendarEvent | undefined> {\n    return this.calendarEvents.get(id);\n  }\n\n  async createCalendarEvent(insertEvent: InsertCalendarEvent): Promise<CalendarEvent> {\n    const id = randomUUID();\n    const event: CalendarEvent = { ...insertEvent, id };\n    this.calendarEvents.set(id, event);\n    return event;\n  }\n\n  async updateCalendarEvent(id: string, updates: Partial<CalendarEvent>): Promise<CalendarEvent | undefined> {\n    const event = this.calendarEvents.get(id);\n    if (!event) return undefined;\n    \n    const updated = { ...event, ...updates };\n    this.calendarEvents.set(id, updated);\n    return updated;\n  }\n\n  async deleteCalendarEvent(id: string): Promise<boolean> {\n    return this.calendarEvents.delete(id);\n  }\n\n  async getUpcomingEvents(limit: number = 10): Promise<CalendarEvent[]> {\n    const now = new Date();\n    return Array.from(this.calendarEvents.values())\n      .filter((event) => new Date(event.startTime) >= now)\n      .sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime())\n      .slice(0, limit);\n  }\n\n  async getTodayEvents(): Promise<CalendarEvent[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return Array.from(this.calendarEvents.values()).filter((event) => {\n      const eventDate = new Date(event.startTime);\n      return eventDate >= today && eventDate < tomorrow;\n    });\n  }\n\n  // Chat operations\n  async getChatMessages(): Promise<ChatMessage[]> {\n    return [...this.chatMessages];\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const message: ChatMessage = {\n      id: randomUUID(),\n      ...insertMessage,\n      timestamp: new Date(),\n    };\n    this.chatMessages.push(message);\n    return message;\n  }\n\n  async clearChatHistory(): Promise<void> {\n    this.chatMessages = [];\n  }\n\n  // Analytics\n  async getEmailAnalytics(): Promise<EmailAnalytics> {\n    const emails = await this.getEmails();\n    const unreadEmails = emails.filter((e) => !e.isRead);\n    const urgentEmails = emails.filter((e) => e.isUrgent);\n\n    const categoryBreakdown = {\n      urgent: emails.filter((e) => e.category === \"urgent\").length,\n      important: emails.filter((e) => e.category === \"important\").length,\n      promotional: emails.filter((e) => e.category === \"promotional\").length,\n      social: emails.filter((e) => e.category === \"social\").length,\n      updates: emails.filter((e) => e.category === \"updates\").length,\n      newsletter: emails.filter((e) => e.category === \"newsletter\").length,\n    };\n\n    // Generate recent activity for last 7 days\n    const recentActivity = [];\n    const today = new Date();\n    for (let i = 6; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      date.setHours(0, 0, 0, 0);\n      const nextDate = new Date(date);\n      nextDate.setDate(nextDate.getDate() + 1);\n\n      const count = emails.filter((email) => {\n        const emailDate = new Date(email.date);\n        return emailDate >= date && emailDate < nextDate;\n      }).length;\n\n      recentActivity.push({\n        date: date.toISOString().split(\"T\")[0],\n        count,\n      });\n    }\n\n    return {\n      totalEmails: emails.length,\n      unreadCount: unreadEmails.length,\n      urgentCount: urgentEmails.length,\n      categoryBreakdown,\n      recentActivity,\n    };\n  }\n\n  async getCalendarAnalytics(): Promise<CalendarAnalytics> {\n    const upcomingEvents = await this.getUpcomingEvents(100);\n    const todayEvents = await this.getTodayEvents();\n\n    const now = new Date();\n    const weekFromNow = new Date(now);\n    weekFromNow.setDate(weekFromNow.getDate() + 7);\n\n    const weekEvents = upcomingEvents.filter(\n      (event) => new Date(event.startTime) < weekFromNow\n    );\n\n    // Calculate free slots for the next 3 days during work hours (9 AM - 5 PM)\n    const freeSlots = [];\n    for (let i = 0; i < 3; i++) {\n      const date = new Date(now);\n      date.setDate(date.getDate() + i);\n      date.setHours(9, 0, 0, 0);\n      \n      const dayEnd = new Date(date);\n      dayEnd.setHours(17, 0, 0, 0);\n\n      // Find events on this day\n      const dayEvents = upcomingEvents.filter((event) => {\n        const eventDate = new Date(event.startTime);\n        return (\n          eventDate.getDate() === date.getDate() &&\n          eventDate.getMonth() === date.getMonth() &&\n          eventDate.getFullYear() === date.getFullYear()\n        );\n      });\n\n      // Find gaps between events\n      let currentTime = new Date(date);\n      dayEvents.forEach((event) => {\n        const eventStart = new Date(event.startTime);\n        if (currentTime < eventStart && (eventStart.getTime() - currentTime.getTime()) / 1000 / 60 >= 30) {\n          freeSlots.push({\n            date: date.toISOString().split(\"T\")[0],\n            startTime: currentTime.toTimeString().slice(0, 5),\n            endTime: eventStart.toTimeString().slice(0, 5),\n          });\n        }\n        currentTime = new Date(Math.max(currentTime.getTime(), new Date(event.endTime).getTime()));\n      });\n\n      // Check if there's time after last event\n      if (currentTime < dayEnd && (dayEnd.getTime() - currentTime.getTime()) / 1000 / 60 >= 30) {\n        freeSlots.push({\n          date: date.toISOString().split(\"T\")[0],\n          startTime: currentTime.toTimeString().slice(0, 5),\n          endTime: dayEnd.toTimeString().slice(0, 5),\n        });\n      }\n    }\n\n    return {\n      upcomingEvents: upcomingEvents.length,\n      todayEvents: todayEvents.length,\n      weekEvents: weekEvents.length,\n      freeSlots: freeSlots.slice(0, 5), // Return top 5 free slots\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9156},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/sync-banner.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { RefreshCw, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState, useEffect } from \"react\";\nimport type { Email } from \"@shared/schema\";\n\nexport function SyncBanner() {\n  const [dismissed, setDismissed] = useState(false);\n  const { toast } = useToast();\n\n  const { data: emails = [] } = useQuery<Email[]>({\n    queryKey: [\"/api/emails\"],\n  });\n\n  const syncAll = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/sync-all\", {});\n      return response.json();\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Sync Complete\",\n        description: `Synced ${data.emailCount} emails and ${data.eventCount} calendar events`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar/events\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/email\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/calendar\"] });\n      setDismissed(true);\n    },\n    onError: async (error: any) => {\n      // Check if error is authentication related\n      if (error.message?.includes(\"authenticated\") || error.status === 401) {\n        // Get OAuth URL and open popup\n        try {\n          const authResponse = await apiRequest(\"GET\", \"/api/auth/google/url\");\n          const authData = await authResponse.json();\n          const authWindow = window.open(\n            authData.url,\n            \"Google Auth\",\n            \"width=600,height=600\"\n          );\n          \n          // Listen for auth success\n          const handleMessage = (event: MessageEvent) => {\n            if (event.data.type === \"gmail-auth-success\") {\n              window.removeEventListener(\"message\", handleMessage);\n              authWindow?.close();\n              toast({\n                title: \"Authentication Successful\",\n                description: \"Please click Sync Now again to sync your data\",\n              });\n            }\n          };\n          \n          window.addEventListener(\"message\", handleMessage);\n        } catch (authError: any) {\n          toast({\n            title: \"Authentication Failed\",\n            description: authError.message || \"Failed to authenticate with Google\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        toast({\n          title: \"Sync Failed\",\n          description: error.message || \"Failed to sync data\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Show banner if no emails and not dismissed\n  if (emails.length > 0 || dismissed) {\n    return null;\n  }\n\n  return (\n    <div className=\"bg-primary/10 border-b border-primary/20 px-6 py-3\">\n      <div className=\"flex items-center justify-between gap-4\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium\">\n            Welcome to Inbox AI! Get started by syncing your Gmail and Calendar.\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-0.5\">\n            Click the button to authenticate with Google and fetch your emails\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            size=\"sm\"\n            onClick={() => syncAll.mutate()}\n            disabled={syncAll.isPending}\n            data-testid=\"button-banner-sync\"\n          >\n            {syncAll.isPending ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n            )}\n            Sync Now\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setDismissed(true)}\n            data-testid=\"button-banner-dismiss\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4065},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/chat.tsx":{"content":"import { useRef, useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Send, Loader2, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { ChatMessage } from \"@shared/schema\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nconst defaultSuggestedPrompts = [\n  \"Summarize today's emails\",\n  \"Show urgent emails\",\n  \"Find free time this week\",\n  \"What meetings do I have today?\",\n  \"Draft a professional reply\",\n];\n\nconst chatFormSchema = z.object({\n  content: z.string().min(1, \"Message cannot be empty\").max(5000, \"Message is too long\"),\n});\n\ntype ChatFormValues = z.infer<typeof chatFormSchema>;\n\nexport default function Chat() {\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const [suggestions, setSuggestions] = useState<string[]>(defaultSuggestedPrompts);\n\n  const form = useForm<ChatFormValues>({\n    resolver: zodResolver(chatFormSchema),\n    defaultValues: {\n      content: \"\",\n    },\n  });\n\n  const { data: messages = [], isLoading } = useQuery<ChatMessage[]>({\n    queryKey: [\"/api/chat/messages\"],\n  });\n\n  const sendMessage = useMutation({\n    mutationFn: async (content: string) => {\n      return apiRequest(\"POST\", \"/api/chat/send\", { content });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/chat/messages\"] });\n      if (data.suggestions && Array.isArray(data.suggestions)) {\n        setSuggestions(data.suggestions);\n      }\n      form.reset();\n    },\n  });\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      const scrollContainer = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');\n      if (scrollContainer) {\n        scrollContainer.scrollTop = scrollContainer.scrollHeight;\n      }\n    }\n  }, [messages]);\n\n  const onSubmit = (data: ChatFormValues) => {\n    if (!sendMessage.isPending) {\n      sendMessage.mutate(data.content.trim());\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      form.handleSubmit(onSubmit)();\n    }\n  };\n\n  const handleSuggestedPrompt = (prompt: string) => {\n    form.setValue(\"content\", prompt);\n    form.setFocus(\"content\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"border-b border-border p-4\">\n        <div className=\"max-w-3xl mx-auto\">\n          <h1 className=\"text-2xl font-semibold flex items-center gap-2\">\n            <Sparkles className=\"h-6 w-6 text-primary\" />\n            Chat with Your Assistant\n          </h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Ask questions about your inbox, calendar, and get intelligent insights\n          </p>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <ScrollArea ref={scrollAreaRef} className=\"flex-1 p-4\">\n        <div className=\"max-w-3xl mx-auto space-y-6\">\n          {messages.length === 0 && !isLoading && (\n            <div className=\"text-center py-12\">\n              <div className=\"inline-flex h-16 w-16 items-center justify-center rounded-full bg-primary/10 mb-4\">\n                <Sparkles className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h2 className=\"text-lg font-medium mb-2\">Start a conversation</h2>\n              <p className=\"text-sm text-muted-foreground mb-6 max-w-md mx-auto\">\n                Ask me anything about your emails, calendar, or request help with scheduling and organization\n              </p>\n              \n              {/* Suggested prompts */}\n              <div className=\"flex flex-wrap gap-2 justify-center\">\n                {suggestions.map((prompt) => (\n                  <Badge\n                    key={prompt}\n                    variant=\"outline\"\n                    className=\"cursor-pointer hover-elevate px-4 py-2 text-xs\"\n                    onClick={() => handleSuggestedPrompt(prompt)}\n                    data-testid={`badge-prompt-${prompt.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  >\n                    {prompt}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n              data-testid={`message-${message.role}-${message.id}`}\n            >\n              <div\n                className={`max-w-2xl rounded-2xl px-4 py-3 ${\n                  message.role === \"user\"\n                    ? \"bg-primary text-primary-foreground\"\n                    : \"bg-card border border-card-border\"\n                }`}\n              >\n                <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">{message.content}</p>\n                <span className=\"text-xs opacity-70 mt-1 block\">\n                  {new Date(message.timestamp).toLocaleTimeString([], {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                  })}\n                </span>\n              </div>\n            </div>\n          ))}\n\n          {sendMessage.isPending && (\n            <div className=\"flex justify-start\" data-testid=\"message-loading\">\n              <div className=\"max-w-2xl rounded-2xl px-4 py-3 bg-card border border-card-border\">\n                <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n              </div>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Input */}\n      <div className=\"border-t border-border p-4 bg-background\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"max-w-3xl mx-auto\">\n            <FormField\n              control={form.control}\n              name=\"content\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Textarea\n                        {...field}\n                        onKeyDown={handleKeyDown}\n                        placeholder=\"Type your message... (Shift+Enter for new line)\"\n                        className=\"min-h-12 pr-12 resize-none\"\n                        rows={1}\n                        data-testid=\"input-chat-message\"\n                      />\n                      <Button\n                        type=\"submit\"\n                        size=\"icon\"\n                        disabled={!field.value.trim() || sendMessage.isPending}\n                        className=\"absolute right-2 top-2\"\n                        data-testid=\"button-send-message\"\n                      >\n                        <Send className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </FormControl>\n                </FormItem>\n              )}\n            />\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              Press Enter to send, Shift+Enter for new line\n            </p>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7439},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/gmail-client.ts":{"content":"// Gmail OAuth integration\nimport { google } from 'googleapis';\n\nconst GMAIL_SCOPES = [\n  'https://www.googleapis.com/auth/gmail.modify',\n  'https://www.googleapis.com/auth/gmail.send',\n  'https://www.googleapis.com/auth/gmail.compose',\n];\n\nconst CALENDAR_SCOPES = [\n  'https://www.googleapis.com/auth/calendar',\n];\n\nconst ALL_SCOPES = [...GMAIL_SCOPES, ...CALENDAR_SCOPES];\n\nlet cachedTokens: any = null;\n\nfunction getOAuth2Client() {\n  const clientId = process.env.GOOGLE_CLIENT_ID;\n  const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  const redirectUri = process.env.REPLIT_DEV_DOMAIN \n    ? `https://${process.env.REPLIT_DEV_DOMAIN}/api/auth/google/callback`\n    : 'http://localhost:5000/api/auth/google/callback';\n\n  if (!clientId || !clientSecret) {\n    throw new Error('Google OAuth credentials not configured. Please add GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET to your secrets.');\n  }\n\n  return new google.auth.OAuth2(clientId, clientSecret, redirectUri);\n}\n\nexport function getAuthUrl() {\n  const oauth2Client = getOAuth2Client();\n  return oauth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: ALL_SCOPES,\n  });\n}\n\nexport async function handleAuthCallback(code: string) {\n  const oauth2Client = getOAuth2Client();\n  const { tokens } = await oauth2Client.getToken(code);\n  cachedTokens = tokens;\n  oauth2Client.setCredentials(tokens);\n  return tokens;\n}\n\nexport function isAuthenticated() {\n  return cachedTokens !== null;\n}\n\nexport function clearAuth() {\n  cachedTokens = null;\n}\n\nexport function getCachedTokens() {\n  return cachedTokens;\n}\n\nexport function hasRequiredScopes(tokens: any): boolean {\n  if (!tokens || !tokens.scope) {\n    return false;\n  }\n  const tokenScopes = tokens.scope.split(' ');\n  return ALL_SCOPES.every(scope => tokenScopes.includes(scope));\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableGmailClient() {\n  if (!cachedTokens) {\n    throw new Error('Gmail not authenticated. Please authenticate first.');\n  }\n\n  const oauth2Client = getOAuth2Client();\n  oauth2Client.setCredentials(cachedTokens);\n\n  return google.gmail({ version: 'v1', auth: oauth2Client });\n}\n","size_bytes":2275},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    const initialTheme = savedTheme || (prefersDark ? \"dark\" : \"light\");\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"Toggle theme\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" data-testid=\"icon-moon\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" data-testid=\"icon-sun\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1216},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Email schema with categorization and metadata\nexport const emails = pgTable(\"emails\", {\n  id: varchar(\"id\").primaryKey(),\n  messageId: text(\"message_id\").notNull().unique(),\n  threadId: text(\"thread_id\"),\n  subject: text(\"subject\").notNull(),\n  from: text(\"from\").notNull(),\n  to: text(\"to\").notNull(),\n  snippet: text(\"snippet\"),\n  body: text(\"body\"),\n  date: timestamp(\"date\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  isStarred: boolean(\"is_starred\").default(false),\n  category: text(\"category\").notNull(), // urgent, important, promotional, social, updates, newsletter\n  isUrgent: boolean(\"is_urgent\").default(false),\n  labels: text(\"labels\").array(),\n  attachmentCount: integer(\"attachment_count\").default(0),\n});\n\nexport const insertEmailSchema = createInsertSchema(emails).omit({\n  id: true,\n});\n\nexport type InsertEmail = z.infer<typeof insertEmailSchema>;\nexport type Email = typeof emails.$inferSelect;\n\n// Calendar events schema\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey(),\n  eventId: text(\"event_id\").notNull().unique(),\n  summary: text(\"summary\").notNull(),\n  description: text(\"description\"),\n  location: text(\"location\"),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  attendees: text(\"attendees\").array(),\n  organizer: text(\"organizer\"),\n  status: text(\"status\"), // confirmed, tentative, cancelled\n  isAllDay: boolean(\"is_all_day\").default(false),\n  colorId: text(\"color_id\"),\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({\n  id: true,\n});\n\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\n\n// Chat messages schema for conversation history\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  role: text(\"role\").notNull(), // user or assistant\n  content: text(\"content\").notNull(),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`),\n  metadata: text(\"metadata\"), // JSON string for additional data\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\n\n// Analytics data for email insights\nexport interface EmailAnalytics {\n  totalEmails: number;\n  unreadCount: number;\n  urgentCount: number;\n  categoryBreakdown: {\n    urgent: number;\n    important: number;\n    promotional: number;\n    social: number;\n    updates: number;\n    newsletter: number;\n  };\n  recentActivity: {\n    date: string;\n    count: number;\n  }[];\n}\n\n// Calendar analytics\nexport interface CalendarAnalytics {\n  upcomingEvents: number;\n  todayEvents: number;\n  weekEvents: number;\n  freeSlots: {\n    date: string;\n    startTime: string;\n    endTime: string;\n  }[];\n}\n\n// Free time slot for scheduling\nexport interface FreeTimeSlot {\n  date: string;\n  startTime: string;\n  endTime: string;\n  durationMinutes: number;\n}\n\n// Draft email response\nexport interface DraftResponse {\n  subject: string;\n  body: string;\n  tone: string; // professional, casual, formal\n}\n","size_bytes":3482},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { BarChart3, Mail, AlertCircle, TrendingUp, Calendar as CalendarIcon, Clock } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport type { EmailAnalytics, CalendarAnalytics } from \"@shared/schema\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, Legend } from \"recharts\";\n\nconst CATEGORY_COLORS = {\n  urgent: \"hsl(var(--destructive))\",\n  important: \"hsl(var(--chart-4))\",\n  promotional: \"hsl(var(--chart-2))\",\n  social: \"hsl(var(--chart-3))\",\n  updates: \"hsl(var(--chart-1))\",\n  newsletter: \"hsl(var(--muted-foreground))\",\n};\n\nexport default function Analytics() {\n  const { data: emailAnalytics, isLoading: emailLoading } = useQuery<EmailAnalytics>({\n    queryKey: [\"/api/analytics/email\"],\n  });\n\n  const { data: calendarAnalytics, isLoading: calendarLoading } = useQuery<CalendarAnalytics>({\n    queryKey: [\"/api/analytics/calendar\"],\n  });\n\n  if (emailLoading || calendarLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <Skeleton className=\"h-12 w-64\" />\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Skeleton key={i} className=\"h-32\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const categoryData = emailAnalytics ? Object.entries(emailAnalytics.categoryBreakdown).map(([name, value]) => ({\n    name: name.charAt(0).toUpperCase() + name.slice(1),\n    value,\n    color: CATEGORY_COLORS[name as keyof typeof CATEGORY_COLORS],\n  })) : [];\n\n  return (\n    <div className=\"flex flex-col h-full overflow-auto\">\n      {/* Header */}\n      <div className=\"border-b border-border p-6 bg-background sticky top-0 z-10\">\n        <h1 className=\"text-2xl font-semibold flex items-center gap-2\">\n          <BarChart3 className=\"h-6 w-6 text-primary\" />\n          Analytics\n        </h1>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          Insights into your email and calendar activity\n        </p>\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Email Stats Cards */}\n        <div>\n          <h2 className=\"text-lg font-semibold mb-4\">Email Overview</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card data-testid=\"card-stat-total-emails\">\n              <CardHeader className=\"pb-2\">\n                <CardDescription className=\"flex items-center gap-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  Total Emails\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">{emailAnalytics?.totalEmails || 0}</div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-stat-unread\">\n              <CardHeader className=\"pb-2\">\n                <CardDescription className=\"flex items-center gap-2\">\n                  <Mail className=\"h-4 w-4\" />\n                  Unread\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">{emailAnalytics?.unreadCount || 0}</div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-stat-urgent\">\n              <CardHeader className=\"pb-2\">\n                <CardDescription className=\"flex items-center gap-2\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  Urgent\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-destructive\">\n                  {emailAnalytics?.urgentCount || 0}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-stat-categories\">\n              <CardHeader className=\"pb-2\">\n                <CardDescription className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Categories\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">\n                  {Object.keys(emailAnalytics?.categoryBreakdown || {}).length}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Calendar Stats Cards */}\n        <div>\n          <h2 className=\"text-lg font-semibold mb-4\">Calendar Overview</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card data-testid=\"card-stat-upcoming-events\">\n              <CardHeader className=\"pb-2\">\n                <CardDescription className=\"flex items-center gap-2\">\n                  <CalendarIcon className=\"h-4 w-4\" />\n                  Upcoming Events\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">{calendarAnalytics?.upcomingEvents || 0}</div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-stat-today-events\">\n              <CardHeader className=\"pb-2\">\n                <CardDescription className=\"flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  Today's Events\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">{calendarAnalytics?.todayEvents || 0}</div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-stat-week-events\">\n              <CardHeader className=\"pb-2\">\n                <CardDescription className=\"flex items-center gap-2\">\n                  <CalendarIcon className=\"h-4 w-4\" />\n                  This Week\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold\">{calendarAnalytics?.weekEvents || 0}</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Charts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Email Activity Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Recent Email Activity</CardTitle>\n              <CardDescription>Last 7 days</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {emailAnalytics?.recentActivity && emailAnalytics.recentActivity.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={emailAnalytics.recentActivity}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-border\" />\n                    <XAxis\n                      dataKey=\"date\"\n                      tickFormatter={(value) => new Date(value).toLocaleDateString(\"en-US\", { month: \"short\", day: \"numeric\" })}\n                      className=\"text-xs\"\n                    />\n                    <YAxis className=\"text-xs\" />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: \"hsl(var(--card))\",\n                        border: \"1px solid hsl(var(--border))\",\n                        borderRadius: \"0.5rem\",\n                      }}\n                    />\n                    <Bar dataKey=\"count\" fill=\"hsl(var(--primary))\" radius={[4, 4, 0, 0]} />\n                  </BarChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-[250px] flex items-center justify-center text-sm text-muted-foreground\">\n                  No data available\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Category Breakdown Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Category Distribution</CardTitle>\n              <CardDescription>Email breakdown by category</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {categoryData.length > 0 && categoryData.some(d => d.value > 0) ? (\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <PieChart>\n                    <Pie\n                      data={categoryData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => percent > 0.05 ? `${name} ${(percent * 100).toFixed(0)}%` : \"\"}\n                      outerRadius={80}\n                      dataKey=\"value\"\n                    >\n                      {categoryData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: \"hsl(var(--card))\",\n                        border: \"1px solid hsl(var(--border))\",\n                        borderRadius: \"0.5rem\",\n                      }}\n                    />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-[250px] flex items-center justify-center text-sm text-muted-foreground\">\n                  No emails to categorize\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Free Time Slots */}\n        {calendarAnalytics?.freeSlots && calendarAnalytics.freeSlots.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Available Time Slots</CardTitle>\n              <CardDescription>Next available slots in your calendar</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {calendarAnalytics.freeSlots.map((slot, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 rounded-lg border border-border hover-elevate\"\n                    data-testid={`slot-${index}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                      <div>\n                        <div className=\"font-medium text-sm\">\n                          {new Date(slot.date).toLocaleDateString(\"en-US\", {\n                            weekday: \"short\",\n                            month: \"short\",\n                            day: \"numeric\",\n                          })}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground font-mono\">\n                          {slot.startTime} - {slot.endTime}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11172},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/intelligence.ts":{"content":"// Rule-based intelligence engine for email categorization and analysis\nimport type { InsertEmail, DraftResponse, FreeTimeSlot } from \"@shared/schema\";\n\n// Categorize email based on sender, subject, and content\nexport function categorizeEmail(from: string, subject: string, body: string): string {\n  const fromLower = from.toLowerCase();\n  const subjectLower = subject.toLowerCase();\n  const bodyLower = body.toLowerCase();\n\n  // Urgent indicators\n  const urgentPatterns = [\n    'urgent', 'asap', 'immediately', 'critical', 'emergency',\n    'deadline', 'today', 'now', 'important', 'action required'\n  ];\n\n  if (urgentPatterns.some(pattern => subjectLower.includes(pattern) || bodyLower.includes(pattern))) {\n    return 'urgent';\n  }\n\n  // Newsletter indicators\n  const newsletterPatterns = [\n    'unsubscribe', 'newsletter', 'weekly digest', 'monthly update',\n    'subscription', 'mailing list'\n  ];\n  \n  if (newsletterPatterns.some(pattern => bodyLower.includes(pattern)) ||\n      fromLower.includes('newsletter') || fromLower.includes('noreply')) {\n    return 'newsletter';\n  }\n\n  // Promotional indicators\n  const promoPatterns = [\n    'discount', 'sale', 'offer', 'deal', 'promo', 'coupon',\n    '% off', 'limited time', 'buy now', 'shop now', 'exclusive'\n  ];\n\n  if (promoPatterns.some(pattern => subjectLower.includes(pattern) || bodyLower.includes(pattern))) {\n    return 'promotional';\n  }\n\n  // Social indicators\n  const socialPatterns = [\n    'liked your', 'commented on', 'mentioned you', 'tagged you',\n    'friend request', 'followed you', 'connection request'\n  ];\n\n  const socialDomains = ['facebook', 'twitter', 'linkedin', 'instagram'];\n\n  if (socialPatterns.some(pattern => subjectLower.includes(pattern)) ||\n      socialDomains.some(domain => fromLower.includes(domain))) {\n    return 'social';\n  }\n\n  // Updates indicators\n  const updatePatterns = [\n    'update', 'notification', 'alert', 'reminder', 'confirmation',\n    'receipt', 'invoice', 'order', 'shipment', 'delivery'\n  ];\n\n  if (updatePatterns.some(pattern => subjectLower.includes(pattern))) {\n    return 'updates';\n  }\n\n  // Default to important\n  return 'important';\n}\n\n// Determine if email is urgent\nexport function isEmailUrgent(from: string, subject: string, body: string): boolean {\n  const urgentPatterns = [\n    'urgent', 'asap', 'immediately', 'critical', 'emergency',\n    'deadline today', 'deadline tomorrow', 'action required',\n    'important:', 'high priority'\n  ];\n\n  const subjectLower = subject.toLowerCase();\n  const bodyLower = body.toLowerCase();\n\n  return urgentPatterns.some(pattern => \n    subjectLower.includes(pattern) || bodyLower.includes(pattern)\n  );\n}\n\n// Generate intelligent email summary\nexport function summarizeEmail(subject: string, body: string): string {\n  // Extract first meaningful sentence or paragraph\n  const lines = body.split('\\n').filter(line => line.trim().length > 20);\n  \n  if (lines.length === 0) {\n    return subject;\n  }\n\n  // Take first significant line, limit to 150 characters\n  let summary = lines[0].trim();\n  if (summary.length > 150) {\n    summary = summary.substring(0, 147) + '...';\n  }\n\n  return summary;\n}\n\n// Generate draft response based on email content\nexport function generateDraftResponse(email: InsertEmail): DraftResponse {\n  const subject = email.subject;\n  const category = email.category;\n\n  let responseSubject = subject.startsWith('Re:') ? subject : `Re: ${subject}`;\n  let tone = 'professional';\n  let body = '';\n\n  switch (category) {\n    case 'urgent':\n      tone = 'formal';\n      body = `Thank you for your urgent message regarding \"${subject}\".\\n\\nI have received your email and will address this matter with highest priority. I will get back to you with a detailed response shortly.\\n\\nBest regards`;\n      break;\n\n    case 'important':\n      tone = 'professional';\n      body = `Thank you for your email regarding \"${subject}\".\\n\\nI appreciate you reaching out. I have reviewed your message and will respond with the information you need.\\n\\nBest regards`;\n      break;\n\n    case 'promotional':\n      tone = 'casual';\n      body = `Thank you for sharing this offer.\\n\\nI'll review the details and get back to you if interested.\\n\\nBest regards`;\n      break;\n\n    case 'social':\n      tone = 'casual';\n      body = `Thanks for connecting!\\n\\nI appreciate you reaching out. Let's stay in touch.\\n\\nBest regards`;\n      break;\n\n    default:\n      tone = 'professional';\n      body = `Thank you for your email.\\n\\nI have received your message and will respond accordingly.\\n\\nBest regards`;\n  }\n\n  return {\n    subject: responseSubject,\n    body,\n    tone,\n  };\n}\n\n// Find free time slots for scheduling\nexport function findFreeSlots(\n  events: { startTime: Date; endTime: Date }[],\n  durationMinutes: number = 60,\n  daysAhead: number = 7\n): FreeTimeSlot[] {\n  const freeSlots: FreeTimeSlot[] = [];\n  const workHourStart = 9; // 9 AM\n  const workHourEnd = 17; // 5 PM\n\n  for (let dayOffset = 0; dayOffset < daysAhead; dayOffset++) {\n    const date = new Date();\n    date.setDate(date.getDate() + dayOffset);\n    date.setHours(workHourStart, 0, 0, 0);\n\n    // Skip weekends\n    if (date.getDay() === 0 || date.getDay() === 6) {\n      continue;\n    }\n\n    const dayEnd = new Date(date);\n    dayEnd.setHours(workHourEnd, 0, 0, 0);\n\n    // Get events for this day\n    const dayEvents = events\n      .filter(event => {\n        const eventDate = new Date(event.startTime);\n        return (\n          eventDate.getDate() === date.getDate() &&\n          eventDate.getMonth() === date.getMonth() &&\n          eventDate.getFullYear() === date.getFullYear()\n        );\n      })\n      .sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());\n\n    // Find gaps between events\n    let currentTime = new Date(date);\n\n    for (const event of dayEvents) {\n      const eventStart = new Date(event.startTime);\n      const gapMinutes = (eventStart.getTime() - currentTime.getTime()) / (1000 * 60);\n\n      if (gapMinutes >= durationMinutes) {\n        freeSlots.push({\n          date: date.toISOString().split('T')[0],\n          startTime: currentTime.toTimeString().slice(0, 5),\n          endTime: eventStart.toTimeString().slice(0, 5),\n          durationMinutes: Math.floor(gapMinutes),\n        });\n      }\n\n      currentTime = new Date(Math.max(currentTime.getTime(), new Date(event.endTime).getTime()));\n    }\n\n    // Check time after last event\n    const remainingMinutes = (dayEnd.getTime() - currentTime.getTime()) / (1000 * 60);\n    if (remainingMinutes >= durationMinutes) {\n      freeSlots.push({\n        date: date.toISOString().split('T')[0],\n        startTime: currentTime.toTimeString().slice(0, 5),\n        endTime: dayEnd.toTimeString().slice(0, 5),\n        durationMinutes: Math.floor(remainingMinutes),\n      });\n    }\n  }\n\n  return freeSlots.slice(0, 10); // Return top 10 slots\n}\n\n// Process chat query and generate intelligent response\nexport function processChatQuery(\n  query: string,\n  context: {\n    emails?: any[];\n    events?: any[];\n    analytics?: any;\n  }\n): string {\n  const queryLower = query.toLowerCase();\n\n  // Email-related queries\n  if (queryLower.includes('email') || queryLower.includes('inbox') || queryLower.includes('message')) {\n    if (queryLower.includes('urgent')) {\n      const urgentCount = context.emails?.filter(e => e.isUrgent).length || 0;\n      return `You have ${urgentCount} urgent email${urgentCount !== 1 ? 's' : ''} in your inbox. ${urgentCount > 0 ? 'I recommend reviewing them as soon as possible.' : 'Great job staying on top of your inbox!'}`;\n    }\n\n    if (queryLower.includes('unread')) {\n      const unreadCount = context.emails?.filter(e => !e.isRead).length || 0;\n      return `You have ${unreadCount} unread email${unreadCount !== 1 ? 's' : ''} waiting for you.`;\n    }\n\n    if (queryLower.includes('summarize') || queryLower.includes('summary')) {\n      const totalEmails = context.emails?.length || 0;\n      const urgentCount = context.emails?.filter(e => e.isUrgent).length || 0;\n      const unreadCount = context.emails?.filter(e => !e.isRead).length || 0;\n\n      return `Here's your email summary:\\n• Total emails: ${totalEmails}\\n• Unread: ${unreadCount}\\n• Urgent: ${urgentCount}\\n\\n${urgentCount > 0 ? 'You have urgent emails that need attention!' : 'Your inbox is under control.'}`;\n    }\n\n    const totalEmails = context.emails?.length || 0;\n    return `You have ${totalEmails} email${totalEmails !== 1 ? 's' : ''} in your inbox. Would you like me to help you organize or summarize them?`;\n  }\n\n  // Calendar-related queries\n  if (queryLower.includes('calendar') || queryLower.includes('meeting') || queryLower.includes('event') || queryLower.includes('schedule')) {\n    if (queryLower.includes('today')) {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      const todayEvents = context.events?.filter(e => {\n        const eventDate = new Date(e.startTime);\n        return eventDate >= today && eventDate < tomorrow;\n      }) || [];\n\n      if (todayEvents.length === 0) {\n        return \"You have no events scheduled for today. Your calendar is clear!\";\n      }\n\n      const eventList = todayEvents\n        .map(e => `• ${new Date(e.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} - ${e.summary}`)\n        .join('\\n');\n\n      return `You have ${todayEvents.length} event${todayEvents.length !== 1 ? 's' : ''} today:\\n\\n${eventList}`;\n    }\n\n    if (queryLower.includes('free') || queryLower.includes('available')) {\n      const upcomingEvents = context.events?.filter(e => new Date(e.startTime) > new Date()) || [];\n      const freeSlots = findFreeSlots(\n        upcomingEvents.map(e => ({ startTime: new Date(e.startTime), endTime: new Date(e.endTime) })),\n        60,\n        5\n      );\n\n      if (freeSlots.length === 0) {\n        return \"Your calendar is quite busy! I couldn't find many free slots in the next few days.\";\n      }\n\n      const slotList = freeSlots.slice(0, 3)\n        .map(s => `• ${new Date(s.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })} at ${s.startTime} (${s.durationMinutes} min available)`)\n        .join('\\n');\n\n      return `Here are your next available time slots:\\n\\n${slotList}`;\n    }\n\n    const upcomingCount = context.events?.filter(e => new Date(e.startTime) > new Date()).length || 0;\n    return `You have ${upcomingCount} upcoming event${upcomingCount !== 1 ? 's' : ''} on your calendar. Would you like to see them or find available time slots?`;\n  }\n\n  // Analytics queries\n  if (queryLower.includes('analytics') || queryLower.includes('stats') || queryLower.includes('report')) {\n    const totalEmails = context.analytics?.totalEmails || 0;\n    const unreadCount = context.analytics?.unreadCount || 0;\n    const urgentCount = context.analytics?.urgentCount || 0;\n\n    return `Here are your email analytics:\\n• Total emails: ${totalEmails}\\n• Unread: ${unreadCount}\\n• Urgent: ${urgentCount}\\n\\nCheck the Analytics page for detailed visualizations!`;\n  }\n\n  // Default helpful response\n  return \"I can help you with:\\n• Summarizing your emails\\n• Finding urgent or unread messages\\n• Checking your calendar and meetings\\n• Finding free time slots\\n• Viewing analytics and insights\\n\\nWhat would you like to know?\";\n}\n","size_bytes":11405},"replit.md":{"content":"# Inbox AI - Intelligent Email & Calendar Assistant\n\n## Overview\nInbox AI is a personal productivity assistant that helps you manage your Gmail inbox and Google Calendar with intelligent AI-powered insights. The application uses Google's Gemini AI to provide helpful responses about your emails, calendar, and schedule.\n\n## Project Status\n**Last Updated:** October 27, 2025\n**Status:** Production-Ready ✅\n\n### Recent Changes\n- ✅ Added Gemini AI integration for intelligent chat responses\n- ✅ Implemented AI-powered chat service with context awareness\n- ✅ Updated chat interface to display dynamic AI-generated suggestions\n- ✅ Integrated free Gemini 2.5 Flash model for fast responses\n- ✅ **Enabled AI action capabilities** - AI can now perform all 10 action types:\n  - Email actions: send, mark read/unread, delete, archive, star, unstar\n  - Calendar actions: create event, update event, delete event\n- ✅ Unified Gmail + Calendar OAuth scopes for seamless authentication\n- ✅ Implemented scope validation with automatic re-authentication prompts\n- ✅ Created AI action executor service with safe calendar update logic\n- ✅ Added comprehensive error handling and user-friendly error messages\n- ✅ Production-ready implementation approved by architect\n\n## Key Features\n- 📧 **Email Management**: Sync and categorize Gmail messages with AI\n- 📅 **Calendar Integration**: View and manage Google Calendar events\n- 💬 **AI Assistant**: Chat with Gemini AI for intelligent insights about your inbox and schedule\n- 📊 **Analytics**: Track email patterns and calendar usage\n- 🔔 **Smart Categorization**: Automatically categorize and prioritize emails\n\n## Technology Stack\n- **Frontend**: React, TypeScript, Vite, TailwindCSS, Shadcn UI\n- **Backend**: Express.js, Node.js\n- **AI**: Google Gemini AI (2.5 Flash - Free tier)\n- **Storage**: In-memory storage (MemStorage)\n- **APIs**: Gmail API, Google Calendar API\n\n## Project Architecture\n- **Frontend** (`client/src/`): React-based SPA with wouter routing\n- **Backend** (`server/`): Express API server with OAuth2 integration\n- **Shared** (`shared/`): TypeScript schemas and types\n- **AI Service** (`server/ai-service.ts`): Gemini AI integration for chat\n\n## Environment Setup\n\n### Required Secrets\n- `GEMINI_API_KEY`: Google Gemini API key (get from https://aistudio.google.com/app/apikey)\n\n### Optional Integrations (Already Configured)\n- Google Mail integration\n- Google Calendar integration\n\n## User Preferences\n- Using free AI options (Gemini AI) due to no capital budget\n- AI should understand the Inbox AI software and be helpful to users\n- Focus on providing intelligent, context-aware assistance\n\n## Development\nThe application runs on port 5000 with:\n- Frontend: Vite dev server\n- Backend: Express server with hot reload via tsx\n\nRun: `npm run dev`\n\n## AI Capabilities\nThe Gemini AI assistant can:\n\n### Read & Analyze:\n- Summarize emails and identify urgent messages\n- Find free time slots in your calendar\n- Answer questions about emails and meetings\n- Provide insights about email patterns\n- Suggest next actions based on context\n\n### Take Actions:\n- ✉️ **Send emails** on your behalf\n- 📧 **Modify emails**: Mark as read/unread, star, archive, or delete\n- 📅 **Manage calendar**: Create, update, or delete events\n- 🤖 **Automated assistance**: Just ask in natural language and the AI will execute\n\n### How to Use Actions:\nSimply ask the AI in natural language:\n- \"Send an email to john@example.com with subject 'Meeting Follow-up' and body 'Thanks for the meeting!'\"\n- \"Mark all unread emails as read\"\n- \"Create a calendar event for tomorrow at 2pm called 'Team Meeting'\"\n- \"Delete that spam email from earlier\"\n\nThe AI will detect your intent and execute the action automatically!\n","size_bytes":3773},"server/ai-service.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\nimport { storage } from \"./storage\";\nimport { executeAIAction, type AIAction } from \"./ai-actions\";\n\n// Blueprint integration reference: blueprint:javascript_gemini\n// Using Gemini 2.5 Flash for fast, free AI responses\n\nconst ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || \"\" });\n\nconst SYSTEM_CONTEXT = `You are an intelligent AI assistant for \"Inbox AI\", a personal email and calendar management application with ACTION CAPABILITIES. You can actually perform actions, not just provide advice.\n\nYour capabilities include:\n**Reading & Analysis:**\n- Summarizing emails and finding important messages\n- Identifying urgent emails that need immediate attention\n- Analyzing email patterns and calendar schedules\n- Answering questions about emails and upcoming meetings\n\n**Actions You Can Perform:**\n- Send emails on the user's behalf\n- Mark emails as read/unread\n- Star or archive emails\n- Delete emails (move to trash)\n- Create, update, or delete calendar events\n\n**Important Guidelines:**\n1. When a user asks you to perform an action (send email, delete email, etc.), you should DO IT and confirm it was done\n2. Be proactive - if the user says \"send an email to...\" or \"delete that spam email\", execute the action\n3. Always confirm what action you took after executing it\n4. If you need more information to perform an action (like who to send email to), ask first\n5. Be helpful, concise, and action-oriented\n\nIf users haven't synced their Gmail and Calendar yet, guide them to do so first.`;\n\nexport interface ChatRequest {\n  message: string;\n  includeContext?: boolean;\n}\n\nexport interface ChatResponse {\n  response: string;\n  suggestions?: string[];\n  actionExecuted?: {\n    type: string;\n    success: boolean;\n    details?: string;\n  };\n}\n\nexport async function generateChatResponse(\n  userMessage: string,\n  includeContext: boolean = true\n): Promise<ChatResponse> {\n  try {\n    const actionResult = await detectAndExecuteAction(userMessage);\n    \n    let contextPrompt = \"\";\n    \n    if (includeContext) {\n      const [emails, events, analytics] = await Promise.all([\n        storage.getEmails(),\n        storage.getCalendarEvents(),\n        storage.getEmailAnalytics(),\n      ]);\n\n      const urgentEmails = emails.filter(e => e.isUrgent);\n      const unreadEmails = emails.filter(e => !e.isRead);\n      const upcomingEvents = await storage.getUpcomingEvents(5);\n\n      contextPrompt = `\\n\\nCurrent user context:\n- Total emails: ${analytics.totalEmails}\n- Unread emails: ${analytics.unreadCount}\n- Urgent emails: ${analytics.urgentCount}\n- Upcoming events today: ${upcomingEvents.length}\n${urgentEmails.length > 0 ? `\\nMost urgent emails:\\n${urgentEmails.slice(0, 3).map(e => `  - ID: ${e.messageId}, From: ${e.from}, Subject: ${e.subject}`).join('\\n')}` : ''}\n${upcomingEvents.length > 0 ? `\\nUpcoming events:\\n${upcomingEvents.map(e => `  - ${e.summary} at ${new Date(e.startTime).toLocaleString()}`).join('\\n')}` : ''}`;\n\n      if (actionResult) {\n        contextPrompt += `\\n\\nAction just executed: ${JSON.stringify(actionResult)}`;\n      }\n    }\n\n    const conversationHistory = await storage.getChatMessages();\n    const recentMessages = conversationHistory.slice(-6);\n\n    const conversationContext = recentMessages.map(msg => ({\n      role: msg.role === 'user' ? 'user' : 'model',\n      parts: [{ text: msg.content }],\n    }));\n\n    conversationContext.push({\n      role: 'user',\n      parts: [{ text: userMessage }],\n    });\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: SYSTEM_CONTEXT + contextPrompt,\n      },\n      contents: conversationContext,\n    });\n\n    const aiResponse = response.text || \"I'm sorry, I couldn't generate a response. Please try again.\";\n\n    const suggestions = generateSuggestions(userMessage, aiResponse);\n\n    return {\n      response: aiResponse,\n      suggestions,\n      actionExecuted: actionResult,\n    };\n  } catch (error) {\n    console.error(\"AI Service Error:\", error);\n    throw new Error(`Failed to generate response: ${error}`);\n  }\n}\n\nasync function detectAndExecuteAction(userMessage: string): Promise<{ type: string; success: boolean; details?: string } | null> {\n  try {\n    const { isAuthenticated } = await import(\"./gmail-client\");\n    if (!isAuthenticated()) {\n      return {\n        type: 'error',\n        success: false,\n        details: 'Please sync your Gmail and Calendar first to enable actions.',\n      };\n    }\n\n    const actionDetectionPrompt = `Analyze this user message and determine if they want to perform an action. If yes, extract the action details in JSON format.\n\nUser message: \"${userMessage}\"\n\nPossible actions:\n1. send_email: {type: \"send_email\", to: \"email\", subject: \"...\", body: \"...\", cc: \"...\", bcc: \"...\"}\n2. mark_read: {type: \"mark_read\", emailId: \"message_id\"}\n3. mark_unread: {type: \"mark_unread\", emailId: \"message_id\"}\n4. delete: {type: \"delete\", emailId: \"message_id\"}\n5. archive: {type: \"archive\", emailId: \"message_id\"}\n6. star: {type: \"star\", emailId: \"message_id\"}\n7. unstar: {type: \"unstar\", emailId: \"message_id\"}\n8. create_event: {type: \"create_event\", summary: \"...\", startTime: \"ISO date\", endTime: \"ISO date\", description: \"...\", location: \"...\", attendees: [\"email1\"]}\n9. update_event: {type: \"update_event\", eventId: \"event_id\", summary: \"...\", startTime: \"ISO date\", endTime: \"ISO date\", description: \"...\", location: \"...\", attendees: [\"email1\"]}\n10. delete_event: {type: \"delete_event\", eventId: \"event_id\"}\n\nIf no action is requested, return: {type: \"none\"}\n\nReturn ONLY valid JSON, no explanation.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n      },\n      contents: [\n        {\n          role: 'user',\n          parts: [{ text: actionDetectionPrompt }],\n        },\n      ],\n    });\n\n    const actionData = JSON.parse(response.text || '{\"type\":\"none\"}');\n    \n    if (actionData.type === 'none' || !actionData.type) {\n      return null;\n    }\n\n    if (actionData.type === 'send_email') {\n      if (!actionData.to || !actionData.subject || !actionData.body) {\n        return {\n          type: 'send_email',\n          success: false,\n          details: 'Missing required information. Please provide recipient, subject, and body.',\n        };\n      }\n\n      const result = await executeAIAction({\n        type: 'send_email',\n        to: actionData.to,\n        subject: actionData.subject,\n        body: actionData.body,\n        cc: actionData.cc,\n        bcc: actionData.bcc,\n      });\n\n      return {\n        type: 'send_email',\n        success: result.success,\n        details: result.success ? `Email sent to ${actionData.to}` : result.error,\n      };\n    }\n\n    if (['mark_read', 'mark_unread', 'delete', 'archive', 'star', 'unstar'].includes(actionData.type)) {\n      if (!actionData.emailId) {\n        return {\n          type: actionData.type,\n          success: false,\n          details: 'Email ID required. Please specify which email to modify.',\n        };\n      }\n\n      const result = await executeAIAction({\n        type: actionData.type as any,\n        emailId: actionData.emailId,\n      });\n\n      return {\n        type: actionData.type,\n        success: result.success,\n        details: result.success ? `Email ${actionData.type.replace('_', ' ')}` : result.error,\n      };\n    }\n\n    if (actionData.type === 'create_event') {\n      if (!actionData.summary || !actionData.startTime || !actionData.endTime) {\n        return {\n          type: 'create_event',\n          success: false,\n          details: 'Missing event details. Need: summary, start time, and end time.',\n        };\n      }\n\n      const result = await executeAIAction({\n        type: 'create_event',\n        eventData: {\n          summary: actionData.summary,\n          description: actionData.description || '',\n          location: actionData.location || '',\n          startTime: actionData.startTime,\n          endTime: actionData.endTime,\n          attendees: actionData.attendees || [],\n        },\n      });\n\n      return {\n        type: 'create_event',\n        success: result.success,\n        details: result.success ? `Event \"${actionData.summary}\" created` : result.error,\n      };\n    }\n\n    if (actionData.type === 'update_event') {\n      if (!actionData.eventId) {\n        return {\n          type: 'update_event',\n          success: false,\n          details: 'Event ID required to update an event.',\n        };\n      }\n\n      if (!actionData.summary && !actionData.startTime && !actionData.endTime && \n          !actionData.description && !actionData.location && !actionData.attendees) {\n        return {\n          type: 'update_event',\n          success: false,\n          details: 'Please specify what to update (summary, time, description, location, or attendees).',\n        };\n      }\n\n      const eventData: any = {};\n      if (actionData.summary) eventData.summary = actionData.summary;\n      if (actionData.description) eventData.description = actionData.description;\n      if (actionData.location) eventData.location = actionData.location;\n      if (actionData.startTime) eventData.startTime = actionData.startTime;\n      if (actionData.endTime) eventData.endTime = actionData.endTime;\n      if (actionData.attendees) eventData.attendees = actionData.attendees;\n\n      const result = await executeAIAction({\n        type: 'update_event',\n        eventId: actionData.eventId,\n        eventData,\n      });\n\n      return {\n        type: 'update_event',\n        success: result.success,\n        details: result.success ? `Event updated successfully` : result.error,\n      };\n    }\n\n    if (actionData.type === 'delete_event') {\n      if (!actionData.eventId) {\n        return {\n          type: 'delete_event',\n          success: false,\n          details: 'Event ID required to delete an event.',\n        };\n      }\n\n      const result = await executeAIAction({\n        type: 'delete_event',\n        eventId: actionData.eventId,\n      });\n\n      return {\n        type: 'delete_event',\n        success: result.success,\n        details: result.success ? `Event deleted successfully` : result.error,\n      };\n    }\n\n    return null;\n  } catch (error: any) {\n    console.error('Action detection error:', error);\n    return {\n      type: 'error',\n      success: false,\n      details: `Action detection failed: ${error.message}`,\n    };\n  }\n}\n\nfunction generateSuggestions(userMessage: string, aiResponse: string): string[] {\n  const lowerMessage = userMessage.toLowerCase();\n  \n  if (lowerMessage.includes('email') || lowerMessage.includes('inbox')) {\n    return [\n      \"Show urgent emails\",\n      \"Summarize today's emails\",\n      \"Find unread messages\",\n    ];\n  }\n  \n  if (lowerMessage.includes('calendar') || lowerMessage.includes('meeting') || lowerMessage.includes('schedule')) {\n    return [\n      \"Find free time this week\",\n      \"What meetings do I have today?\",\n      \"Show my calendar for tomorrow\",\n    ];\n  }\n  \n  if (lowerMessage.includes('draft') || lowerMessage.includes('reply') || lowerMessage.includes('write')) {\n    return [\n      \"Draft a professional reply\",\n      \"Help me write a follow-up\",\n      \"Compose a thank you email\",\n    ];\n  }\n  \n  return [\n    \"Summarize today's emails\",\n    \"Show urgent emails\",\n    \"Find free time this week\",\n  ];\n}\n\nexport async function summarizeEmails(category?: string): Promise<string> {\n  try {\n    const emails = category \n      ? await storage.getEmailsByCategory(category)\n      : await storage.getEmails();\n\n    if (emails.length === 0) {\n      return \"No emails found to summarize.\";\n    }\n\n    const emailSummaries = emails.slice(0, 20).map(email => ({\n      from: email.from,\n      subject: email.subject,\n      snippet: email.snippet || '',\n      urgent: email.isUrgent,\n    }));\n\n    const prompt = `Summarize these emails concisely, highlighting any urgent or important items:\\n\\n${JSON.stringify(emailSummaries, null, 2)}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt,\n    });\n\n    return response.text || \"Unable to generate summary.\";\n  } catch (error) {\n    console.error(\"Email summarization error:\", error);\n    throw new Error(`Failed to summarize emails: ${error}`);\n  }\n}\n\nexport async function draftReply(emailId: string, tone: 'professional' | 'casual' | 'formal' = 'professional'): Promise<string> {\n  try {\n    const email = await storage.getEmail(emailId);\n    \n    if (!email) {\n      throw new Error(\"Email not found\");\n    }\n\n    const prompt = `Draft a ${tone} reply to this email:\nFrom: ${email.from}\nSubject: ${email.subject}\nBody: ${email.body || email.snippet}\n\nPlease write a concise, appropriate response.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      contents: prompt,\n    });\n\n    return response.text || \"Unable to generate draft.\";\n  } catch (error) {\n    console.error(\"Draft reply error:\", error);\n    throw new Error(`Failed to draft reply: ${error}`);\n  }\n}\n","size_bytes":13129},"server/ai-actions.ts":{"content":"import { getUncachableGmailClient } from \"./gmail-client\";\nimport { getUncachableGoogleCalendarClient } from \"./calendar-client\";\nimport { storage } from \"./storage\";\n\nexport interface EmailAction {\n  type: 'send_email';\n  to: string;\n  subject: string;\n  body: string;\n  cc?: string;\n  bcc?: string;\n}\n\nexport interface EmailModifyAction {\n  type: 'mark_read' | 'mark_unread' | 'delete' | 'archive' | 'star' | 'unstar';\n  emailId: string;\n}\n\nexport interface CalendarAction {\n  type: 'create_event' | 'update_event' | 'delete_event';\n  eventData?: {\n    summary: string;\n    description?: string;\n    location?: string;\n    startTime: string;\n    endTime: string;\n    attendees?: string[];\n  };\n  eventId?: string;\n}\n\nexport type AIAction = EmailAction | EmailModifyAction | CalendarAction;\n\nexport async function executeSendEmail(action: EmailAction): Promise<{ success: boolean; messageId?: string; error?: string }> {\n  try {\n    const gmail = await getUncachableGmailClient();\n\n    const email = [\n      'Content-Type: text/plain; charset=\"UTF-8\"\\n',\n      'MIME-Version: 1.0\\n',\n      'Content-Transfer-Encoding: 7bit\\n',\n      `To: ${action.to}\\n`,\n      action.cc ? `Cc: ${action.cc}\\n` : '',\n      action.bcc ? `Bcc: ${action.bcc}\\n` : '',\n      `Subject: ${action.subject}\\n\\n`,\n      action.body,\n    ].join('');\n\n    const encodedEmail = Buffer.from(email)\n      .toString('base64')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '');\n\n    const response = await gmail.users.messages.send({\n      userId: 'me',\n      requestBody: {\n        raw: encodedEmail,\n      },\n    });\n\n    return {\n      success: true,\n      messageId: response.data.id || undefined,\n    };\n  } catch (error: any) {\n    console.error('Error sending email:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to send email',\n    };\n  }\n}\n\nexport async function executeEmailModify(action: EmailModifyAction): Promise<{ success: boolean; error?: string }> {\n  try {\n    const gmail = await getUncachableGmailClient();\n\n    switch (action.type) {\n      case 'mark_read':\n        await gmail.users.messages.modify({\n          userId: 'me',\n          id: action.emailId,\n          requestBody: {\n            removeLabelIds: ['UNREAD'],\n          },\n        });\n        break;\n\n      case 'mark_unread':\n        await gmail.users.messages.modify({\n          userId: 'me',\n          id: action.emailId,\n          requestBody: {\n            addLabelIds: ['UNREAD'],\n          },\n        });\n        break;\n\n      case 'star':\n        await gmail.users.messages.modify({\n          userId: 'me',\n          id: action.emailId,\n          requestBody: {\n            addLabelIds: ['STARRED'],\n          },\n        });\n        break;\n\n      case 'unstar':\n        await gmail.users.messages.modify({\n          userId: 'me',\n          id: action.emailId,\n          requestBody: {\n            removeLabelIds: ['STARRED'],\n          },\n        });\n        break;\n\n      case 'archive':\n        await gmail.users.messages.modify({\n          userId: 'me',\n          id: action.emailId,\n          requestBody: {\n            removeLabelIds: ['INBOX'],\n          },\n        });\n        break;\n\n      case 'delete':\n        await gmail.users.messages.trash({\n          userId: 'me',\n          id: action.emailId,\n        });\n        break;\n    }\n\n    return { success: true };\n  } catch (error: any) {\n    console.error('Error modifying email:', error);\n    return {\n      success: false,\n      error: error.message || 'Failed to modify email',\n    };\n  }\n}\n\nexport async function executeCalendarAction(action: CalendarAction): Promise<{ success: boolean; eventId?: string; error?: string }> {\n  try {\n    const { getCachedTokens, hasRequiredScopes, clearAuth } = await import(\"./gmail-client\");\n    const tokens = getCachedTokens();\n    \n    if (!hasRequiredScopes(tokens)) {\n      clearAuth();\n      return {\n        success: false,\n        error: 'Insufficient permissions. Please re-sync your Gmail and Calendar to grant all required permissions.',\n      };\n    }\n\n    const calendar = await getUncachableGoogleCalendarClient();\n\n    if (action.type === 'create_event' && action.eventData) {\n      const response = await calendar.events.insert({\n        calendarId: 'primary',\n        requestBody: {\n          summary: action.eventData.summary,\n          description: action.eventData.description,\n          location: action.eventData.location,\n          start: {\n            dateTime: action.eventData.startTime,\n            timeZone: 'America/New_York',\n          },\n          end: {\n            dateTime: action.eventData.endTime,\n            timeZone: 'America/New_York',\n          },\n          attendees: action.eventData.attendees?.map(email => ({ email })),\n        },\n      });\n\n      return {\n        success: true,\n        eventId: response.data.id || undefined,\n      };\n    }\n\n    if (action.type === 'delete_event' && action.eventId) {\n      await calendar.events.delete({\n        calendarId: 'primary',\n        eventId: action.eventId,\n      });\n\n      return { success: true };\n    }\n\n    if (action.type === 'update_event' && action.eventId && action.eventData) {\n      const updatePayload: any = {};\n      \n      if (action.eventData.summary) {\n        updatePayload.summary = action.eventData.summary;\n      }\n      if (action.eventData.description) {\n        updatePayload.description = action.eventData.description;\n      }\n      if (action.eventData.location) {\n        updatePayload.location = action.eventData.location;\n      }\n      if (action.eventData.startTime) {\n        updatePayload.start = {\n          dateTime: action.eventData.startTime,\n          timeZone: 'America/New_York',\n        };\n      }\n      if (action.eventData.endTime) {\n        updatePayload.end = {\n          dateTime: action.eventData.endTime,\n          timeZone: 'America/New_York',\n        };\n      }\n      if (action.eventData.attendees) {\n        updatePayload.attendees = action.eventData.attendees.map(email => ({ email }));\n      }\n\n      const response = await calendar.events.patch({\n        calendarId: 'primary',\n        eventId: action.eventId,\n        requestBody: updatePayload,\n      });\n\n      return {\n        success: true,\n        eventId: response.data.id || undefined,\n      };\n    }\n\n    return {\n      success: false,\n      error: 'Invalid action configuration',\n    };\n  } catch (error: any) {\n    console.error('Error executing calendar action:', error);\n    \n    if (error.message?.includes('insufficient') || error.code === 403) {\n      const { clearAuth } = await import(\"./gmail-client\");\n      clearAuth();\n      return {\n        success: false,\n        error: 'Insufficient permissions detected. Please re-sync your account to grant calendar access.',\n      };\n    }\n    \n    return {\n      success: false,\n      error: error.message || 'Failed to execute calendar action',\n    };\n  }\n}\n\nexport async function executeAIAction(action: AIAction): Promise<{ success: boolean; result?: any; error?: string }> {\n  if (action.type === 'send_email') {\n    return await executeSendEmail(action);\n  }\n\n  if (action.type === 'mark_read' || action.type === 'mark_unread' || action.type === 'delete' || \n      action.type === 'archive' || action.type === 'star' || action.type === 'unstar') {\n    return await executeEmailModify(action);\n  }\n\n  if (action.type === 'create_event' || action.type === 'update_event' || action.type === 'delete_event') {\n    return await executeCalendarAction(action);\n  }\n\n  return {\n    success: false,\n    error: 'Unknown action type',\n  };\n}\n","size_bytes":7621}},"version":2}